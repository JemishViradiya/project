@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($animation-description) {
  -webkit-animation: #{$animation-description};
  -moz-animation: #{$animation-description};
  -ms-animation: #{$animation-description};
  -o-animation: #{$animation-description};
  animation: #{$animation-description};
}

@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }

  #{$property}: $value;
}

%clearfix {
  *zoom: 1;
  &:before,
  &:after {
    content: ' ';
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin horizontally-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin center-both {
  position: absolute;
  top: 50%;
  left: 50%;
  @include prefix(transform, translate(-50%, -50%), 'webkit' 'ms');
}

@mixin vertically-center($height) {
  position: absolute;
  top: 50%;
  height: $height;
  margin-top: -($height / 2);
}

@mixin vertically-center-unknown {
  position: relative;
  top: 50%;
  @include prefix(transform, translateY(-50%), 'webkit' 'ms');
}

@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin hide-text {
  overflow: hidden;
  text-indent: -9000px;
  display: block;
}

@mixin background-gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation == 'vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

@mixin font-face($font-name, $weight: 400, $style: normal) {
  $file-name-prefix: '/fonts/';
  $numWeight: null;
  $textStyle: $style;

  @if $weight == 400 {
    $numWeight: '';
    @if $style == normal {
      $textStyle: 'regular';
    }
  } @else {
    $numWeight: $weight;
  }

  @if $style == normal {
    @if $textStyle != 'regular' {
      $textStyle: '';
    }
  }

  $file-name: $file-name-prefix + $font-name + '-' + $numWeight + $textStyle + '/' + $font-name + '-' + $numWeight + $textStyle;

  @font-face {
    font-family: quote($font-name);
    src: url($file-name + '.eot');
    src: url($file-name + '.eot?#iefix') format('embedded-opentype'), url($file-name + '.woff') format('woff'),
      url($file-name + '.ttf') format('truetype'), url($file-name + '.svg##{$font-name}') format('svg');
  }
}

@mixin hardware-accelerate {
  @include prefix(transform, translate3d(0, 0, 0), 'webkit' 'ms');
}
