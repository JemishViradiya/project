import { MobileProtectData } from '@ues-data/mtd'
import { TableSortDirection } from '@ues/behaviours'

import { OS_DELIMITER, PATCH_DELIMITER, VERSION_DELIMITER } from './constants'
import { withoutBrackets } from './queries'

function b2n(r: boolean): number {
  return r ? 1 : -1
}

export const simpleStringSort = (a: string, b: string, sortDirection: TableSortDirection): number => {
  if (sortDirection === TableSortDirection.Asc) {
    return a.localeCompare(b)
  } else {
    return b.localeCompare(a)
  }
}

export const simpleNumberSort = (a: number, b: number, sortDirection: TableSortDirection): number => {
  if (sortDirection === TableSortDirection.Asc) {
    return b2n(a < b)
  } else {
    return b2n(b < a)
  }
}

function compareUndefined(a: string, b: string): boolean {
  return (a ? parseInt(a) : 0) < (b ? parseInt(b) : 0)
}

function compositeSort(a: string, b: string, delimiter: string): boolean {
  if (a !== undefined && b !== undefined) {
    const as = a.split(delimiter)
    const bs = b.split(delimiter)
    if (as[0] === bs[0]) {
      if (as[1] === bs[1]) {
        return compareUndefined(as[2], bs[2])
      }

      return compareUndefined(as[1], bs[1])
    }

    return compareUndefined(as[0], bs[0])
  } else if (a === undefined && b !== undefined) {
    return true
  } else if (b === undefined && a !== undefined) {
    return false
  } else {
    return true
  }
}

const versionStringSort = (a: string, b: string): number => {
  const aVersion = a.split(OS_DELIMITER)[0]
  const bVersion = b.split(OS_DELIMITER)[0]
  if (aVersion === bVersion) {
    const aPatch = withoutBrackets(a.split(OS_DELIMITER)[1])
    const bPatch = withoutBrackets(b.split(OS_DELIMITER)[1])
    return b2n(compositeSort(aPatch, bPatch, PATCH_DELIMITER))
  }
  return b2n(compositeSort(aVersion, bVersion, VERSION_DELIMITER))
}

export const versionSort = (a: string, b: string, sortDirection: TableSortDirection): number => {
  if (sortDirection === TableSortDirection.Asc) {
    return versionStringSort(a, b)
  } else {
    return versionStringSort(b, a)
  }
}

export const severitySort = (a: string, b: string, sortDirection: TableSortDirection): number => {
  return simpleNumberSort(
    Object.values(MobileProtectData.Severity).indexOf(a as MobileProtectData.Severity),
    Object.values(MobileProtectData.Severity).indexOf(b as MobileProtectData.Severity),
    sortDirection,
  )
}
