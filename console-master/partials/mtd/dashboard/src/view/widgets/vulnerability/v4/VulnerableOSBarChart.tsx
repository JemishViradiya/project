import HttpStatus from 'http-status-codes'
import React from 'react'
import { useTranslation } from 'react-i18next'

import { makeStyles } from '@material-ui/core/styles'

import type { ChartProps, EnhancedChartEntry, SegmentedBarChartData } from '@ues-behaviour/dashboard'
import { ChartHeader, GenericDashboardError, NoDataError, SegmentedBarChart, TotalCount } from '@ues-behaviour/dashboard'
import type { MobileProtectData } from '@ues-data/mtd'
import { queryOsSeverityInfo } from '@ues-data/mtd'
import { FeatureName, useFeatures, useStatefulAsyncQuery } from '@ues-data/shared'
import { PermissionError } from '@ues-data/shared-types'

import { OS_DELIMITER } from './utils/constants'
import { getOsPlatform, inBrackets, useFeatureNavigation, vulnerabilitiesNavigate } from './utils/queries'

const useStyles = makeStyles(theme => ({
  chartContainer: {
    height: '100%',
    paddingTop: 0,
    paddingBottom: theme.spacing(1),
  },
  chartHeader: {
    paddingBottom: 0,
  },
}))

const VulnerableOSBarChart: React.FC<ChartProps> = React.memo(() => {
  const styles = useStyles()
  const features = useFeatures()
  const featureNavigation = useFeatureNavigation()
  const { t } = useTranslation(['mtd/common'])

  const processBackendState = (data: any[], error: any): void => {
    if (error) {
      if (error.response.status === HttpStatus.FORBIDDEN && features.isEnabled(FeatureName.PermissionChecksEnabled)) {
        throw new PermissionError([])
      } else {
        throw new GenericDashboardError(undefined, t('vulnerability.errors.networkAccess'))
      }
    } else if (data?.length === 0) {
      throw new NoDataError()
    }
  }

  const { data, error, loading } = useStatefulAsyncQuery(queryOsSeverityInfo)

  processBackendState(data, error)

  const onInteraction = (): void => {
    vulnerabilitiesNavigate(featureNavigation, '/details')
  }

  const onBarInteraction = (item): void => {
    const osInfo = item.label.split(OS_DELIMITER)
    vulnerabilitiesNavigate(featureNavigation, '/details', {
      platform: osInfo[0],
      version: `${osInfo[1]}${OS_DELIMITER}${osInfo[2]}`.trim(),
    })
  }

  function getTotal(ossInfo: MobileProtectData.SeverityCountsByOs[]): number {
    return ossInfo ? ossInfo.length : 0
  }

  const getChartData = (ossInfo: MobileProtectData.SeverityCountsByOs[]): EnhancedChartEntry<SegmentedBarChartData>[] => {
    const chartData = []
    if (ossInfo) {
      for (const osInfo of ossInfo) {
        const barData = []
        barData.push(osInfo.severityCount.critical)
        barData.push(osInfo.severityCount.high)
        barData.push(osInfo.severityCount.medium)
        barData.push(osInfo.severityCount.low)
        chartData.push({
          counts: barData,
          label: `${getOsPlatform(osInfo.os.platform)}${OS_DELIMITER}${osInfo.os.version}${OS_DELIMITER}${
            osInfo.os.securityPatch ? inBrackets(osInfo.os.securityPatch) : ''
          }`,
        })
      }
    }
    return chartData
  }

  return (
    <div className={styles.chartContainer}>
      {data && (
        <ChartHeader className={styles.chartHeader}>
          {
            <TotalCount
              count={getTotal(data).toString()}
              description={t('vulnerability.totalOsVersions')}
              onInteraction={() => onInteraction()}
            />
          }
        </ChartHeader>
      )}
      <SegmentedBarChart
        data={getChartData(data)}
        onInteraction={item => onBarInteraction(item)}
        options={{ colorScheme: 'alert' }}
      />
    </div>
  )
})

export default VulnerableOSBarChart
