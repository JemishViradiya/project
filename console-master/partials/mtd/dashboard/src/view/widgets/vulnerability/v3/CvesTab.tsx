import clsx from 'clsx'
import React, { useCallback, useMemo, useState } from 'react'
import { useTranslation } from 'react-i18next'
import { Column } from 'react-virtualized'

import Box from '@material-ui/core/Box'
import LinearProgress from '@material-ui/core/LinearProgress'
import Link from '@material-ui/core/Link'
import ListItem from '@material-ui/core/ListItem'
import ListItemText from '@material-ui/core/ListItemText'
import Paper from '@material-ui/core/Paper'
import TableCell from '@material-ui/core/TableCell'
import TableSortLabel from '@material-ui/core/TableSortLabel'
import Typography from '@material-ui/core/Typography'

import { queryCveSummaries } from '@ues-data/mtd'
import { useStatefulAsyncQuery } from '@ues-data/shared'
import type { SimpleFilter } from '@ues/behaviours'
import { CheckboxFilter, FILTER_TYPES, meetsFilter, TableSortDirection, useFilter, useSort } from '@ues/behaviours'

import { getSeverityColor, getSeverityIcon } from './shared/osChartUtils'
import { cveSortHandler, TableSortCriteria } from './shared/sortUtils'
import { useCheckboxFilter } from './shared/useCheckboxFilter'
import type { TabProps } from './shared/useInfiniteTable'
import { InfiniteTable, Loading, NoData, standardWidth, useInfiniteTable } from './shared/useInfiniteTable'

const DESCRIPTION_MAX_LENGTH = 400
const ROW_HEIGHT = 120
const HEADER_HEIGHT = 53

// eslint-disable-next-line sonarjs/cognitive-complexity
const CvesTab: React.FC<TabProps> = React.memo(({ value, index, oss }) => {
  const { t } = useTranslation(['mtd/common', 'mtd/vulnerability'])
  const { classes, theme } = useInfiniteTable()
  const { activeFilters, onSetFilter, onRemoveFilter } = useFilter<SimpleFilter<string[]>>()
  const [moreData, setMoreData] = useState({ data: [], cursor: null })
  const sortProps = useSort(null, TableSortDirection.Asc)

  const SEVERITIES = [t('critical'), t('high'), t('medium'), t('low')]

  const filterProps = useCheckboxFilter({ activeFilters, onSetFilter, onRemoveFilter }, 'severity')

  const handleSortChange = (sortBy: string): void => {
    const sortDir = sortProps.sortDirection === TableSortDirection.Asc ? TableSortDirection.Desc : TableSortDirection.Asc

    localData = cveSortHandler(localData, { sortBy: sortBy, sortDir: sortDir })
    sortProps.setSort(sortBy)
    sortProps.setSortDirection(sortDir)
  }

  function truncateDescription(description: string) {
    if (description.length <= DESCRIPTION_MAX_LENGTH) {
      return description
    }
    const subString = description.substr(0, DESCRIPTION_MAX_LENGTH - 1) // the original check
    return subString.substr(0, subString.lastIndexOf(' ')) + ' ...'
  }

  const headerRowRenderer = ({ className, columns, style }) => {
    return (
      <>
        <div className={className} style={style}>
          {columns}
        </div>
        {loading && <Loading style={style} />}
      </>
    )
  }

  const headerRenderer = ({ style }) => {
    return (
      <TableCell
        component="div"
        key={'cves'}
        style={style}
        className={clsx('MuiTableCell-head', classes.headCell, classes.flexContainer, classes.noClick)}
      >
        <Box display="flex" flex={1} alignItems="center">
          <Box flexGrow={1}>
            <TableSortLabel
              onClick={() => handleSortChange(TableSortCriteria.Severity)}
              active={sortProps.sort === TableSortCriteria.Severity}
              direction={sortProps.sortDirection as any}
            >
              {t('severity')}
            </TableSortLabel>
            <TableSortLabel
              onClick={() => handleSortChange(TableSortCriteria.Date)}
              active={sortProps.sort === TableSortCriteria.Date}
              direction={sortProps.sortDirection as any}
            >
              {t('lastModifiedDate')}
            </TableSortLabel>
          </Box>
          <Box>
            <CheckboxFilter items={SEVERITIES} label={t('severity')} {...filterProps} />
          </Box>
          <Box mt={-1} style={style}>
            <LinearProgress color="secondary" />
          </Box>
        </Box>
      </TableCell>
    )
  }

  const cellRenderer = cellData => {
    const record = cellData.rowData
    return (
      <ListItem component="div" divider={true} className={classes.cellContent} key={index}>
        <ListItemText
          primary={
            <div>
              <div style={{ color: getSeverityColor(record.cvss3Impact.severity.toLowerCase(), theme) }}>
                {getSeverityIcon(record.cvss3Impact.severity.toLowerCase())} {record.cvss3Impact.severity} (
                {record.cvss3Impact.baseScore}){', '}
                {t('vulnerabilityDateFormat', { date: new Date(record.lastModifiedDate) })}
              </div>
              <Typography>
                <Link target="_blank" rel="noopener" href={record.cveUrl}>
                  {record.cveId}
                </Link>
              </Typography>
            </div>
          }
          secondary={truncateDescription(record.description)}
        />
      </ListItem>
    )
  }

  const noDataRenderer = () => {
    return <NoData noDataLabel={t('noDataLabel')} />
  }

  const { loading, data: cveData } = useStatefulAsyncQuery(queryCveSummaries, {
    variables: { oss, cursor: moreData.cursor },
    skip: value !== index || oss.length === undefined || oss.length === 0,
  })

  let localData = useMemo(() => {
    const newData = cveData ? cveData?.data?.elements : []
    const collectedData = [...newData, ...moreData.data]
    const uniqueData = collectedData.filter((v, i, a) => a.findIndex(t => JSON.stringify(t) === JSON.stringify(v)) === i)

    return uniqueData.filter(row =>
      meetsFilter(t(row.cvss3Impact?.severity.toLowerCase()), activeFilters['severity'] as any, FILTER_TYPES.CHECKBOX),
    )
  }, [cveData, moreData.data, t, activeFilters])

  const onLoadMoreRows = useCallback(
    async ({ startIndex, stopIndex }) => {
      setMoreData({ data: [...moreData.data, ...cveData?.data?.elements], cursor: cveData?.data?.next })
    },
    [moreData.data, cveData],
  )

  const infiniteLoader = {
    rowCount: localData.length,
    isRowLoaded: index => !!localData[index],
    loadMoreRows: onLoadMoreRows,
    threshold: 30,
    minimumBatchSize: 50,
  }

  return (
    value === index && (
      <Paper>
        <Box display="flex" flexDirection="column" height="90vh">
          <InfiniteTable
            noDataRenderer={noDataRenderer}
            rowCount={localData.length}
            rowGetter={({ index }) => localData[index]}
            infiniteLoader={infiniteLoader}
            headerRowRenderer={headerRowRenderer}
            headerHeight={HEADER_HEIGHT}
            rowHeight={ROW_HEIGHT}
            content={
              <Column
                key={'cves'}
                headerRenderer={headerProps =>
                  headerRenderer({
                    ...headerProps,
                  })
                }
                className={classes?.tableCell}
                cellRenderer={cellProps => cellRenderer({ ...cellProps })}
                dataKey={'cves'}
                {...standardWidth}
              />
            }
          />
        </Box>
      </Paper>
    )
  )
})

export default CvesTab
