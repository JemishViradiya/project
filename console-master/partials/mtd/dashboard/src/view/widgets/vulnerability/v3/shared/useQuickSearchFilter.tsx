/* eslint-disable jsx-a11y/no-autofocus */
import { get, throttle } from 'lodash-es'
import { useEffect, useState } from 'react'

import { usePopover } from '@ues/behaviours'

export const useQuickSearchFilter = ({ columnId, defaultOperator, activeFilters, onSetFilter, onRemoveFilter }) => {
  const key = columnId
  const [selectedOperator, setSelectedOperator] = useState(defaultOperator)

  const [value, setValue] = useState(get(activeFilters, `${key}.value`, ''))

  const { popoverAnchorEl, handlePopoverClick, handlePopoverClose, popoverIsOpen } = usePopover()

  const [showOperators, setShowOperators] = useState(false)
  const onSelectOperator = op => () => {
    setSelectedOperator(op)

    if (value) {
      onSetFilter({
        key,
        value: {
          operator: op,
          value,
        },
      })
    }
  }
  const onToggleOperators = () => setShowOperators(!showOperators)

  const handleClearSearchText = event => {
    event.preventDefault()
    setValue('')
    onRemoveFilter(key)
  }

  const handleValueChange = throttle(value => {
    const inputInvalid = !value || value.trim() === ''
    if (inputInvalid) {
      return
    }
    onSetFilter({
      key,
      value: { operator: selectedOperator, value: value.trim() },
    })
  }, 300)

  useEffect(() => {
    handleValueChange(value)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [value])

  useEffect(() => {
    const newValue = get(activeFilters, `${key}.value`, '')
    if (newValue !== value) {
      setValue(newValue)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [activeFilters, key])

  return {
    popoverProps: {
      open: popoverIsOpen,
      anchorEl: popoverAnchorEl,
      onClose: handlePopoverClose,
    },
    onIconClick: handlePopoverClick,
    operatorsProps: {
      onToggleOperators,
      onSelectOperator,
      selectedOperator,
      showOperators,
    },
    onClear: handleClearSearchText,
    value,
    setValue,
  }
}
