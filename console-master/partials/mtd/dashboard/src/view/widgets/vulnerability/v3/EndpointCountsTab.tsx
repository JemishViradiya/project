import ReactEcharts from 'echarts-for-react'
import React from 'react'
import { useTranslation } from 'react-i18next'

import Box from '@material-ui/core/Box'
import Paper from '@material-ui/core/Paper'
import { useTheme } from '@material-ui/core/styles'
import TableSortLabel from '@material-ui/core/TableSortLabel'

import type { MobileProtectData } from '@ues-data/mtd'
import { TableSortDirection, useSort } from '@ues/behaviours'

import { getOption, OsChartType } from './shared/osChartUtils'
import { ChartSortCriteria, panelChartSortHandler, sorterStyle } from './shared/sortUtils'
import type { TabProps } from './shared/useInfiniteTable'

interface ChartProps {
  ossData: MobileProtectData.SeverityAndEndpointCountsByOs[]
}

const EndpointCountsChart: React.FC<ChartProps> = ({ ossData }) => {
  const { t } = useTranslation(['mtd/common', 'mtd/vulnerability'])
  const theme = useTheme()

  const chartData = getOption(ossData, OsChartType.Endpoint, t, theme)

  const chartStyle = { width: '100%' }
  return <ReactEcharts option={chartData} style={chartStyle} />
}

function formatAsCountdata(ossData: MobileProtectData.OsCount[]): MobileProtectData.SeverityAndEndpointCountsByOs[] {
  const ossCounts = []
  for (const os of ossData) {
    ossCounts.push({
      os: os.os,
      severityCount: { critical: 0, high: 0, medium: 0, low: 0, none: 0 } as MobileProtectData.SeverityCounts,
      endpointCount: os.endpointCount,
    })
  }
  return ossCounts
}

const SeverityCountsTab: React.FC<TabProps> = React.memo(({ value, index, oss }) => {
  const { t } = useTranslation(['mtd/common', 'mtd/vulnerability'])

  const sortProps = useSort(null, TableSortDirection.Asc)

  let countsData: MobileProtectData.SeverityAndEndpointCountsByOs[] = formatAsCountdata(oss)
  countsData = panelChartSortHandler(countsData, sortProps.sort as ChartSortCriteria, sortProps.sortDirection as TableSortDirection)

  const handleSortChange = (criteria: ChartSortCriteria): void => {
    const sortBy = criteria
    const sortDir = sortProps.sortDirection === TableSortDirection.Asc ? TableSortDirection.Desc : TableSortDirection.Asc
    sortProps.setSort(sortBy)
    sortProps.setSortDirection(sortDir)
  }

  return (
    value === index && (
      <Paper>
        <Box display="flex" flexDirection="column" height="90vh">
          <div style={sorterStyle}>
            <TableSortLabel
              onClick={() => handleSortChange(ChartSortCriteria.Os)}
              active={sortProps.sort === ChartSortCriteria.Os}
              direction={sortProps.sortDirection as any}
            >
              {t('osSort')}
            </TableSortLabel>
            <TableSortLabel
              onClick={() => handleSortChange(ChartSortCriteria.Endpoints)}
              active={sortProps.sort === ChartSortCriteria.Endpoints}
              direction={sortProps.sortDirection as any}
            >
              {t('endpointsSort')}
            </TableSortLabel>
          </div>
          <div>{<EndpointCountsChart ossData={countsData} />}</div>
        </Box>
      </Paper>
    )
  )
})

export default SeverityCountsTab
