//******************************************************************************
// Copyright 2021 BlackBerry. All Rights Reserved.

export enum POLICY_TYPE {
  CONTENT = 'CONTENT',
  MOBILE = 'MOBILE',
}

export enum CLASSIFICATION {
  REGULATORY = 'REGULATORY',
  ORGANIZATIONAL = 'ORGANIZATIONAL',
}

export type Policy = {
  policyName: string
  policyId?: string
  policyType: POLICY_TYPE
  classification?: CLASSIFICATION
  description: string
  created?: string
  modified?: string
  value: string //PolicyValue in json format
  // example: "value": "{\"searchPatterns\": [ { \"guid\": \"patterne2e2-11\", \"minOccurrence\": 3 }, { \"guid\": \"patterne2e2-2\", \"minOccurrence\": 1 }], \"browserDomains\": [\"aa5.com\", \"bb5.com\"], \"policyRules\": [{ \"activity\":\"ACTIVITY_TYPE_USB_EXFILTRATE\", \"action\":\"ACTION_TYPE_ALERT\", \"osType\":\"OPERATING_SYSTEM_TYPE_WINDOWS\" }], \"policyConfigs\": [{ \"config\":\"CONFIG_TYPE_ALLOW_KEYBOARDS\", \"osType\":\"OPERATING_SYSTEM_TYPE_IOS\" }], \"uploadEvidenceFile\": {\"OPERATING_SYSTEM_TYPE_ALL\": false},\"numberOfScreenshots\": {\"OPERATING_SYSTEM_TYPE_IOS\": 5}}",
}

export enum DOMAINS {
  DROPBOX = 'dropbox.com',
  SHARE_POINT = 'sharepoint.com',
}

export enum OPERATING_SYSTEM_TYPE {
  OPERATING_SYSTEM_TYPE_ALL = 'OPERATING_SYSTEM_TYPE_ALL',
  OPERATING_SYSTEM_TYPE_WINDOWS = 'OPERATING_SYSTEM_TYPE_WINDOWS',
  OPERATING_SYSTEM_TYPE_MACOS = 'OPERATING_SYSTEM_TYPE_MACOS',
  OPERATING_SYSTEM_TYPE_IOS = 'OPERATING_SYSTEM_TYPE_IOS',
  OPERATING_SYSTEM_TYPE_LINUX_GENERIC = 'OPERATING_SYSTEM_TYPE_LINUX_GENERIC',
  OPERATING_SYSTEM_TYPE_LINUX_RHEL = 'OPERATING_SYSTEM_TYPE_LINUX_RHEL',
  OPERATING_SYSTEM_TYPE_LINUX_SUSE = 'OPERATING_SYSTEM_TYPE_LINUX_SUSE',
  OPERATING_SYSTEM_TYPE_LINUX_UBUNTU = 'OPERATING_SYSTEM_TYPE_LINUX_UBUNTU',
  OPERATING_SYSTEM_TYPE_LINUX_CENTOS = 'OPERATING_SYSTEM_TYPE_LINUX_CENTOS',
  OPERATING_SYSTEM_TYPE_LINUX_FEDORA = 'OPERATING_SYSTEM_TYPE_LINUX_FEDORA',
  OPERATING_SYSTEM_TYPE_LINUX_MINT = 'OPERATING_SYSTEM_TYPE_LINUX_MINT',
  OPERATING_SYSTEM_TYPE_LINUX_DEBIAN = 'OPERATING_SYSTEM_TYPE_LINUX_DEBIAN',
  OPERATING_SYSTEM_TYPE_LINUX_ARCH = 'OPERATING_SYSTEM_TYPE_LINUX_ARCH',
  OPERATING_SYSTEM_TYPE_LINUX_GENTOO = 'OPERATING_SYSTEM_TYPE_LINUX_GENTOO',
  OPERATING_SYSTEM_TYPE_LINUX_AMAZON = 'OPERATING_SYSTEM_TYPE_LINUX_AMAZON',
  OPERATING_SYSTEM_TYPE_UNIX_GENERIC = 'OPERATING_SYSTEM_TYPE_UNIX_GENERIC',
  OPERATING_SYSTEM_TYPE_UNIX_FREEBSD = 'OPERATING_SYSTEM_TYPE_UNIX_FREEBSD',
  OPERATING_SYSTEM_TYPE_UNIX_OPENBSD = 'OPERATING_SYSTEM_TYPE_UNIX_OPENBSD',
  OPERATING_SYSTEM_TYPE_ANDROID_GENERIC = 'OPERATING_SYSTEM_TYPE_ANDROID_GENERIC',
}

export enum ACTION_TYPE {
  ACTION_TYPE_NONE = 'ACTION_TYPE_NONE',
  ACTION_TYPE_ALERT = 'ACTION_TYPE_ALERT',
  UNRECOGNIZED = 'Unrecognized',
}

export enum ACTIVITY_TYPE {
  ACTIVITY_TYPE_BROWSER_UPLOAD = 'ACTIVITY_TYPE_BROWSER_UPLOAD',
  ACTIVITY_TYPE_USB_EXFILTRATE = 'ACTIVITY_TYPE_USB_EXFILTRATE',
  ACTIVITY_TYPE_SCREEN_CAPTURE = 'ACTIVITY_TYPE_SCREEN_CAPTURE',
  ACTIVITY_TYPE_EMAIL_CLIENTS = 'ACTIVITY_TYPE_EMAIL_CLIENTS',
  UNRECOGNIZED = 'Unrecognized',
}

export enum BOOLEAN_VALUE_TYPE {
  BOOLEAN_VALUE_TYPE_NOT_SET,
  BOOLEAN_VALUE_TYPE_TRUE,
  BOOLEAN_VALUE_TYPE_FALSE,
}

export enum CONFIG_TYPE {
  CONFIG_TYPE_ALLOW_COPY_BB_APPS_INTO_NON_BB_APPS = 'CONFIG_TYPE_ALLOW_COPY_BB_APPS_INTO_NON_BB_APPS',
  CONFIG_TYPE_ALLOW_COPY_NON_BB_APPS_INTO_BB_APPS = 'CONFIG_TYPE_ALLOW_COPY_NON_BB_APPS_INTO_BB_APPS',
  CONFIG_TYPE_ALLOW_DICTATION = 'CONFIG_TYPE_ALLOW_DICTATION',
  CONFIG_TYPE_ALLOW_INSECURE_VIDEO = 'CONFIG_TYPE_ALLOW_INSECURE_VIDEO',
  CONFIG_TYPE_ALLOW_SCREEN_RECORDING = 'CONFIG_TYPE_ALLOW_SCREEN_RECORDING',
  CONFIG_TYPE_ALLOW_KEYBOARDS = 'CONFIG_TYPE_ALLOW_KEYBOARDS',
  CONFIG_TYPE_ADD_WATERMARK = 'CONFIG_TYPE_ADD_WATERMARK',
  CONFIG_TYPE_ALLOW_RESTRICTED_MODE = 'CONFIG_TYPE_ALLOW_RESTRICTED_MODE',
  UNRECOGNIZED = 'UNRECOGNIZED',
}

export enum EMAIL_RULE {
  NONE = 'None',
  INTERNAL_RECIPIENTS_ONLY = 'Internal recipients only',
  FOR_ALL_RECIPIENTS = 'For all recipients',
}

export type PolicyRules = {
  activity: ACTIVITY_TYPE
  action: ACTION_TYPE
  osType: OPERATING_SYSTEM_TYPE
}

export type PolicyConfig = {
  config: CONFIG_TYPE
  osType: OPERATING_SYSTEM_TYPE
  enabled: boolean
}

export type SearchPattern = {
  guid: string
  occurrences: number
}

export type PolicyValue = {
  searchPatterns?: SearchPattern[]
  browserDomains?: string[]
  policyRules: PolicyRules[]
  policyConfigs: PolicyConfig[]
  uploadEvidenceFile?: any
  numberOfScreenshots?: any
  intervalForScreenshots?: any
  condition?: string
  searchPatternGuids?: string[]
  priority?: number
  emailDomainsRule?: EMAIL_RULE
}

export enum MOBILE_OPERATING_SYSTEM_TYPE_NAMES {
  OPERATING_SYSTEM_TYPE_WINDOWS_MOBILE = 'Windows Mobile',
  OPERATING_SYSTEM_TYPE_ANDROID_GENERIC = 'Android',
  OPERATING_SYSTEM_TYPE_IOS = 'IOS',
}

// Note LocalPolicyData will contain data based on both types or separately each one.
// PolicyValue is for definitionPolicy call
// Policy is for getPolicy call
export type LocalPolicyData = PolicyValue & Policy
