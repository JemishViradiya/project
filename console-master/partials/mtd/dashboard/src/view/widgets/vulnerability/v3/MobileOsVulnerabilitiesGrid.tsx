import React, { memo, useMemo, useState } from 'react'
import { useTranslation } from 'react-i18next'

import Avatar from '@material-ui/core/Avatar'
import Box from '@material-ui/core/Box'
import Card from '@material-ui/core/Card'
import CardContent from '@material-ui/core/CardContent'
import CardHeader from '@material-ui/core/CardHeader'
import Chip from '@material-ui/core/Chip'
import GridList from '@material-ui/core/GridList'
import Paper from '@material-ui/core/Paper'
import Tab from '@material-ui/core/Tab'
import Table from '@material-ui/core/Table'
import TableBody from '@material-ui/core/TableBody'
import TableCell from '@material-ui/core/TableCell'
import TableContainer from '@material-ui/core/TableContainer'
import TableHead from '@material-ui/core/TableHead'
import TableRow from '@material-ui/core/TableRow'
import TableSortLabel from '@material-ui/core/TableSortLabel'
import Tabs from '@material-ui/core/Tabs'
import Typography from '@material-ui/core/Typography'

import { MobileProtectData } from '@ues-data/mtd'
import { CheckboxFilter, FILTER_TYPES, meetsFilter, TableSortDirection, useFilter, useSort } from '@ues/behaviours'

import CvesTab from './CvesTab'
import EndpointCountsTab from './EndpointCountsTab'
import SeverityCountsTab from './SeverityCountsTab'
import { getSeverityColor, getSeverityIcon } from './shared/osChartUtils'
import { getTotal, osKeySortHandler, tableSortHandler, TableSortType } from './shared/sortUtils'
import type { CheckboxFilterHookOptions } from './shared/useCheckboxFilter'
import { useCheckboxFilter } from './shared/useCheckboxFilter'
import { useInfiniteTable } from './shared/useInfiniteTable'
import UsersTab from './UsersTab'

function formatRowData(osCountsData: MobileProtectData.SeverityAndEndpointCountsByOs) {
  return {
    platform: osCountsData.os.platform,
    version: osCountsData.os.version,
    securityPatch: osCountsData.os.securityPatch,
    numEndpoints: osCountsData.endpointCount,
    total: getTotal(osCountsData.severityCount),
    critical: osCountsData.severityCount.critical,
    high: osCountsData.severityCount.high,
    medium: osCountsData.severityCount.medium,
    low: osCountsData.severityCount.low,
  }
}

function getOsData(context) {
  const ossCountsData: MobileProtectData.SeverityAndEndpointCountsByOs[] = context.context
  return ossCountsData.map(osCountsData => formatRowData(osCountsData))
}

function formatOsData(osData): MobileProtectData.OsCount {
  return {
    os: { platform: osData.platform, version: osData.version, securityPatch: osData.securityPatch },
    endpointCount: osData.numEndpoints,
  }
}

function getOs(data): MobileProtectData.OsCount[] {
  return data.map(osData => formatOsData(osData))
}

const HeadCellLabel = ({ column, onSortChange, sort }) => {
  if (!column.sortType) return column.label

  return (
    <TableSortLabel active={sort?.sort === column.id} direction={sort?.sortDirection} onClick={() => onSortChange(column)}>
      {column.label}
    </TableSortLabel>
  )
}

const TableCellWithFilter = memo(
  ({
    col,
    rowData,
    onSortChange,
    sort,
    ...filterProps
  }: { col: any; rowData: any[]; onSortChange: any; sort: any } & CheckboxFilterHookOptions) => {
    const checkboxProps = useCheckboxFilter(filterProps, col.id)
    const items = useMemo(() => rowData.map(data => data[col.id]).filter((v, i, a) => a.indexOf(v) === i), [col.id, rowData])
    return (
      <TableCell key={col.id}>
        <Box display="flex" flex={1} alignItems="center">
          <Box flexGrow={1}>
            <HeadCellLabel column={col} onSortChange={onSortChange} sort={sort} />
            {col.filterType === FILTER_TYPES.CHECKBOX && <CheckboxFilter label={col.label} {...checkboxProps} items={items} />}
          </Box>
        </Box>
      </TableCell>
    )
  },
)

const TableColumnsWithFilters = ({ columns, activeFilters, onSetFilter, onRemoveFilter, rowData, onSortChange, sort }) => (
  <TableRow>
    {columns.map(col => (
      <TableCellWithFilter
        col={col}
        activeFilters={activeFilters}
        onSetFilter={onSetFilter}
        onRemoveFilter={onRemoveFilter}
        rowData={rowData}
        onSortChange={onSortChange}
        sort={sort}
      />
    ))}
  </TableRow>
)

const SeverityBadge = ({ severity, value, theme }) => (
  <Chip
    size={'small'}
    label={value}
    avatar={
      <Avatar>
        <div style={{ color: getSeverityColor(severity, theme) }}>{getSeverityIcon(severity)}</div>
      </Avatar>
    }
  ></Chip>
)

const TotalsBadge = ({ value }) => <Chip size={'small'} label={value}></Chip>

const MobileOsVulnerabilitiesGrid = React.memo(context => {
  const { t } = useTranslation(['mtd/common', 'mtd/vulnerability'])
  const { activeFilters, onSetFilter, onRemoveFilter } = useFilter()
  const sortProps = useSort(null, TableSortDirection.Asc)

  const [tabValue, setTabValue] = useState<number>(0)
  const { theme } = useInfiniteTable()

  const columns = useMemo(
    () => [
      {
        label: t('platform'),
        id: 'platform',
        sortType: TableSortType.Literal,
        filterType: FILTER_TYPES.CHECKBOX,
      },
      {
        label: t('version'),
        id: 'version',
        sortType: TableSortType.Literal,
        filterType: FILTER_TYPES.CHECKBOX,
      },
      {
        label: t('securityPatch'),
        id: 'securityPatch',
        sortType: TableSortType.Literal,
        filterType: FILTER_TYPES.CHECKBOX,
      },
      {
        label: t('numEndpoints'),
        id: 'numEndpoints',
        sortType: TableSortType.Numeric,
      },
      {
        label: t('critical'),
        id: 'critical',
      },
      {
        label: t('high'),
        id: 'high',
      },
      {
        label: t('medium'),
        id: 'medium',
      },
      {
        label: t('low'),
        id: 'low',
      },
      {
        label: t('total'),
        id: 'total',
        sortType: TableSortType.Numeric,
      },
    ],
    [t],
  )

  const handleSortChange = (column: any): void => {
    const sortBy = column.id
    const sortDir =
      column.id === sortProps.sort && sortProps.sortDirection === TableSortDirection.Asc
        ? TableSortDirection.Desc
        : TableSortDirection.Asc

    sortProps.setSort(sortBy)
    sortProps.setSortDirection(sortDir)
  }

  const handleTabChange = (event: React.ChangeEvent<unknown>, value: any): void => {
    setTabValue(value)
  }

  const onSelectRow = row => {
    //
  }

  const oss = getOsData(context)

  let filteredOss = []

  if (oss && oss.length > 0) {
    filteredOss = oss.filter(row =>
      Object.keys(row).reduce((isVisible, key) => {
        return isVisible && meetsFilter(row[key], activeFilters[key] as any, FILTER_TYPES.CHECKBOX)
      }, true),
    )

    filteredOss = tableSortHandler(filteredOss, { sortBy: sortProps.sort, sortDir: sortProps.sortDirection as TableSortDirection })
  }

  const panelOss = osKeySortHandler(getOs(filteredOss))
  const panelKey = JSON.stringify(panelOss)

  return (
    <Card>
      <CardHeader title={<Typography variant="h4">{t('mobileOsVulnerabilitiesGridTitle')}</Typography>} />
      <CardContent>
        <Paper square={false} elevation={0}>
          <GridList cellHeight={400} cols={1} style={{ overflow: 'auto', maxHeight: '50%' }}>
            <TableContainer>
              <Table aria-label="simple table">
                <TableHead>
                  <TableColumnsWithFilters
                    columns={columns}
                    activeFilters={activeFilters}
                    onSetFilter={onSetFilter}
                    onRemoveFilter={onRemoveFilter}
                    rowData={oss}
                    onSortChange={handleSortChange}
                    sort={sortProps}
                  />
                </TableHead>
                <TableBody>
                  {filteredOss.map(row => {
                    return (
                      <TableRow onClick={() => onSelectRow(row)}>
                        <TableCell>{row.platform}</TableCell>
                        <TableCell>{row.version}</TableCell>
                        <TableCell>{row.securityPatch}</TableCell>
                        <TableCell>
                          <TotalsBadge value={row.numEndpoints}></TotalsBadge>
                        </TableCell>
                        <TableCell>
                          <SeverityBadge severity={MobileProtectData.Severity.CRITICAL} value={row.critical} theme={theme} />
                        </TableCell>
                        <TableCell>
                          <SeverityBadge severity={MobileProtectData.Severity.HIGH} value={row.high} theme={theme} />
                        </TableCell>
                        <TableCell>
                          <SeverityBadge severity={MobileProtectData.Severity.MEDIUM} value={row.medium} theme={theme} />
                        </TableCell>
                        <TableCell>
                          <SeverityBadge severity={MobileProtectData.Severity.LOW} value={row.low} theme={theme} />
                        </TableCell>
                        <TableCell>
                          <TotalsBadge value={row.total}></TotalsBadge>
                        </TableCell>
                      </TableRow>
                    )
                  })}
                </TableBody>
              </Table>
            </TableContainer>
          </GridList>
        </Paper>
        <Paper square={false} elevation={0} key={panelKey}>
          <Tabs value={tabValue} onChange={handleTabChange} color="secondary" className="navigation">
            <Tab id="0" label={t('Users')} className="navigation" />
            <Tab id="1" label={t('CVEs')} className="navigation" />
            <Tab id="2" label={t('Details')} className="navigation" />
            <Tab id="3" label={t('Endpoints')} className="navigation" />
          </Tabs>
          <UsersTab index={0} value={tabValue} oss={panelOss}></UsersTab>
          <CvesTab index={1} value={tabValue} oss={panelOss}></CvesTab>
          <SeverityCountsTab index={2} value={tabValue} oss={panelOss}></SeverityCountsTab>
          <EndpointCountsTab index={3} value={tabValue} oss={panelOss}></EndpointCountsTab>
        </Paper>
      </CardContent>
    </Card>
  )
})

export default MobileOsVulnerabilitiesGrid
