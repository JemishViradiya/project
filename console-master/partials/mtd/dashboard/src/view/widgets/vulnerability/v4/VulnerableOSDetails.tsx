import React, { useCallback, useMemo, useRef } from 'react'
import { useTranslation } from 'react-i18next'

import type { Theme } from '@material-ui/core'
import { Box, Icon, Link, Typography, useTheme } from '@material-ui/core'

import { XGrid } from '@ues-behaviour/x-grid'
import { MobileProtectData, queryOsDetailsInfo } from '@ues-data/mtd'
import { Permission, usePermissions, useStatefulAsyncQuery } from '@ues-data/shared'
import { PermissionError } from '@ues-data/shared-types'
import { StatusCritical, StatusHigh, StatusLow, StatusMedium, StatusUnknown } from '@ues/assets'
import type { TableColumn } from '@ues/behaviours'
import {
  AppliedFilterPanel,
  ColumnPicker,
  ContentAreaPanel,
  FILTER_TYPES,
  meetsFilter,
  OPERATOR_VALUES,
  TableProvider,
  TableSortDirection,
  TableToolbar,
  useColumnPicker,
  useFilter,
  useFilterLabels,
  useSort,
} from '@ues/behaviours'

import { OS_DELIMITER } from './utils/constants'
import { CheckBoxFilterComponent, StringFilterComponent } from './utils/filters'
import { OsIcon } from './utils/icons'
import {
  getOsPlatform,
  inBrackets,
  mobileDevicesNavigate,
  useErrorReport,
  useFeatureNavigation,
  useOsQuery,
  vulnerabilitiesNavigate,
  withoutBrackets,
} from './utils/queries'
import { simpleNumberSort, simpleStringSort, versionSort } from './utils/sorters'
import { useStyles } from './utils/styles'

const MAX_RECORDS_COUNT = 1000

const PLATFORM_COLUMN = 'platform'
const VERSION_COLUMN = 'version'
const ENDPOINTCOUNT_COLUMN = 'endpointCount'
const TOTALCVE_COLUMN = 'totalCve'
const CRITICALCVE_COLUMN = 'criticalCve'
const HIGHCVE_COLUMN = 'hightCve'
const MEDIUMCVE_COLUMN = 'mediumCve'
const LOWCVE_COLUMN = 'lowCve'

function getOsVersion(version: string, securityPatch: string): string {
  return securityPatch.length > 0 ? `${version}${OS_DELIMITER}${inBrackets(securityPatch)}` : version
}

function getTotal(severityCounts: MobileProtectData.SeverityCounts): number {
  return severityCounts.critical + severityCounts.high + severityCounts.medium + severityCounts.low
}

function getSeverityColor(severity: MobileProtectData.Severity, theme /*:Theme */) {
  return theme.palette.chipAlert[severity] ? theme.palette.chipAlert[severity] : theme.palette.chipAlert.info
}

function getSeverityIcon(severity: MobileProtectData.Severity) {
  let severityIcon
  if (severity === MobileProtectData.Severity.CRITICAL) {
    severityIcon = StatusCritical
  } else if (severity === MobileProtectData.Severity.HIGH) {
    severityIcon = StatusHigh
  } else if (severity === MobileProtectData.Severity.MEDIUM) {
    severityIcon = StatusMedium
  } else if (severity === MobileProtectData.Severity.LOW) {
    severityIcon = StatusLow
  } else {
    severityIcon = StatusUnknown
  }
  return <Icon component={severityIcon} fontSize="small" />
}

function composeTableData(items: MobileProtectData.SeverityAndEndpointCountsByOs[]) {
  return items.map((item, index) => {
    return {
      [PLATFORM_COLUMN]: getOsPlatform(item.os.platform),
      [VERSION_COLUMN]: getOsVersion(item.os.version, item.os.securityPatch.trim()),
      [ENDPOINTCOUNT_COLUMN]: item.endpointCount,
      [TOTALCVE_COLUMN]: getTotal(item.severityCount),
      [CRITICALCVE_COLUMN]: item.severityCount.critical,
      [HIGHCVE_COLUMN]: item.severityCount.high,
      [MEDIUMCVE_COLUMN]: item.severityCount.medium,
      [LOWCVE_COLUMN]: item.severityCount.low,
      id: index,
    }
  })
}

const sortHandler = (data, sort) => {
  const sortBy = sort.sort
  switch (sortBy) {
    case PLATFORM_COLUMN:
      return data.sort((a: string, b: string) => simpleStringSort(a[sortBy], b[sortBy], sort.sortDirection))
    case VERSION_COLUMN:
      return data.sort((a: string, b: string) => versionSort(a[sortBy], b[sortBy], sort.sortDirection))
    default:
      return data.sort((a: number, b: number) => simpleNumberSort(a[sortBy], b[sortBy], sort.sortDirection))
  }
}

const idFunction = rowData => rowData.id

const getFilterItems = (entries, column) => {
  return entries.map(entry => entry[column]).filter((v, i, a) => a.findIndex(t => t === v) === i)
}

// eslint-disable-next-line sonarjs/cognitive-complexity
const VulnerableOSDetails = React.memo(() => {
  const { t } = useTranslation(['mtd/common'])
  const theme = useTheme()
  const featureNavigation = useFeatureNavigation()
  const { hasPermission } = usePermissions()
  const { container, content } = useStyles()
  const filterItems = useRef<any>()

  const { platformParam, versionParam } = useOsQuery()
  const partial = platformParam && versionParam ? true : false

  const navigateCve = useCallback(async (platform: string, version: string, severity?: string) => {
    const query = {
      platform: platform,
      version: version,
    }

    if (severity) query['severity'] = severity

    vulnerabilitiesNavigate(featureNavigation, '/cve', query)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  const navigateMobileDevice = useCallback(async (platform: string, version: string) => {
    const versionInfo = version.split(OS_DELIMITER)
    const query = {
      osPlatform: platform.toLowerCase(),
      osVersion: versionInfo[0],
    }
    if (versionInfo[1]) query['osSecurityPatch'] = withoutBrackets(versionInfo[1])

    mobileDevicesNavigate(featureNavigation, query)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  const getTotalCveDataItem = useCallback(rowData => {
    return (
      <Link role="link" target="_blank" onClick={() => navigateCve(rowData.platform, rowData.version)}>
        {rowData[TOTALCVE_COLUMN]}
      </Link>
    )
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  const getSeverityNavigationItem = useCallback(
    (severity: MobileProtectData.Severity, severityColumnName: string, rowData: any) => {
      return (
        <Link role="link" target="_blank" onClick={() => navigateCve(rowData.platform, rowData.version, severity)}>
          {rowData[severityColumnName]}
        </Link>
      )
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [],
  )

  const getSeverityDataItem = useMemo(
    () => (severity: MobileProtectData.Severity, severityColumnName: string, rowData: any, theme: Theme) => {
      return (
        <div
          style={{
            display: 'flex',
            lineHeight: '20px',
          }}
        >
          <div
            style={{
              color: getSeverityColor(severity, theme),
            }}
          >
            {getSeverityIcon(severity)}
          </div>
          <div
            style={{
              flex: 1,
              marginLeft: `${theme.spacing(1)}px`,
              marginRight: `${theme.spacing(1)}px`,
            }}
          >
            {getSeverityNavigationItem(severity, severityColumnName, rowData)}
          </div>
        </div>
      )
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [],
  )

  const getTotalAffectedAssetsItem = useCallback(
    rowData => {
      return hasPermission(Permission.ECS_DEVICES_READ) ? (
        <Link
          role="link"
          onClick={() => {
            navigateMobileDevice(rowData.platform, rowData.version)
          }}
        >
          {rowData[ENDPOINTCOUNT_COLUMN]}
        </Link>
      ) : (
        rowData[ENDPOINTCOUNT_COLUMN]
      )
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [],
  )

  const handleRowClick = useCallback((rowData, event) => {
    if (event.target.attributes.role.value === 'cell') {
      navigateCve(rowData.row.platform, rowData.row.version)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  const columns: TableColumn[] = useMemo(
    () => [
      {
        label: t('vulnerability.osdetails.platform'),
        dataKey: PLATFORM_COLUMN,
        filterType: FILTER_TYPES.CHECKBOX,
        renderFilter: () => (
          <CheckBoxFilterComponent
            label={t('vulnerability.osdetails.platform')}
            dataKey={PLATFORM_COLUMN}
            items={filterItems.current ? filterItems.current[PLATFORM_COLUMN] : []}
          />
        ),
        renderCell: rowData => <OsIcon os={rowData.platform} />,
        sortable: true,
        persistent: true,
        gridColDefProps: { flex: 1 },
      },
      {
        label: t('vulnerability.osdetails.version'),
        dataKey: VERSION_COLUMN,
        filterType: FILTER_TYPES.QUICK_SEARCH,
        renderFilter: () => <StringFilterComponent fieldName={VERSION_COLUMN} label={t('vulnerability.osdetails.version')} />,
        sortable: true,
        persistent: true,
        gridColDefProps: { flex: 1 },
      },
      {
        label: t('vulnerability.osdetails.endpointCount'),
        dataKey: ENDPOINTCOUNT_COLUMN,
        renderCell: (rowData: any, rowDataIndex: number) => {
          return getTotalAffectedAssetsItem(rowData)
        },
        sortable: true,
        persistent: true,
        gridColDefProps: { flex: 1 },
      },
      {
        label: t('vulnerability.osdetails.totalCve'),
        dataKey: TOTALCVE_COLUMN,
        renderCell: (rowData: any, rowDataIndex: number) => {
          return getTotalCveDataItem(rowData)
        },
        sortable: true,
        persistent: true,
        gridColDefProps: { flex: 1 },
      },
      {
        label: t('vulnerability.osdetails.criticalCve'),
        dataKey: CRITICALCVE_COLUMN,
        renderCell: (rowData: any, rowDataIndex: number) => {
          return getSeverityDataItem(MobileProtectData.Severity.CRITICAL, CRITICALCVE_COLUMN, rowData, theme)
        },
        sortable: true,
        gridColDefProps: { flex: 1 },
      },
      {
        label: t('vulnerability.osdetails.highCve'),
        dataKey: HIGHCVE_COLUMN,
        renderCell: (rowData: any, rowDataIndex: number) => {
          return getSeverityDataItem(MobileProtectData.Severity.HIGH, HIGHCVE_COLUMN, rowData, theme)
        },
        sortable: true,
        gridColDefProps: { flex: 1 },
      },
      {
        label: t('vulnerability.osdetails.mediumCve'),
        dataKey: MEDIUMCVE_COLUMN,
        renderCell: (rowData: any, rowDataIndex: number) => {
          return getSeverityDataItem(MobileProtectData.Severity.MEDIUM, MEDIUMCVE_COLUMN, rowData, theme)
        },
        sortable: true,
        gridColDefProps: { flex: 1 },
      },
      {
        label: t('vulnerability.osdetails.lowCve'),
        dataKey: LOWCVE_COLUMN,
        renderCell: (rowData: any, rowDataIndex: number) => {
          return getSeverityDataItem(MobileProtectData.Severity.LOW, LOWCVE_COLUMN, rowData, theme)
        },
        sortable: true,
        gridColDefProps: { flex: 1 },
      },
    ],
    [getSeverityDataItem, getTotalAffectedAssetsItem, getTotalCveDataItem, t, theme],
  )

  const sortProps = useSort(TOTALCVE_COLUMN, TableSortDirection.Asc)
  const defaultFilters = {}
  if (partial) {
    defaultFilters[PLATFORM_COLUMN] = { value: [platformParam], operator: OPERATOR_VALUES.IS_IN }
    defaultFilters[VERSION_COLUMN] = { value: versionParam, operator: OPERATOR_VALUES.CONTAINS }
  }
  const filterProps = useFilter(defaultFilters)

  const filterLabelProps = useFilterLabels(filterProps.activeFilters, columns)

  const { displayedColumns, columnPickerProps } = useColumnPicker({ columns, title: t('vulnerability.columnPicker') })
  columnPickerProps.tableCell = false

  const { data, loading, error } = useStatefulAsyncQuery(queryOsDetailsInfo)

  const backendReadable = useErrorReport(error)
  if (!backendReadable) throw new PermissionError([Permission.ECS_VULNERABILITIES_READ], error)

  const newData = useMemo(() => {
    if (data === undefined) {
      return []
    }

    const tableData = composeTableData(data)

    if (filterItems.current === undefined) {
      filterItems.current = {
        platform: getFilterItems(tableData, PLATFORM_COLUMN),
      }
    }
    return tableData
  }, [data])

  const filteredAssigned = useMemo(() => {
    const filteredData = newData
      .filter(row =>
        Object.keys(row)
          .filter(key => key === PLATFORM_COLUMN)
          .reduce((isVisible, key) => {
            return isVisible && meetsFilter(row[key], filterProps.activeFilters[key] as any, FILTER_TYPES.CHECKBOX)
          }, true),
      )
      .filter(row =>
        Object.keys(row)
          .filter(key => key === VERSION_COLUMN)
          .reduce((isVisible, key) => {
            return isVisible && meetsFilter(row[key], filterProps.activeFilters[key] as any, FILTER_TYPES.QUICK_SEARCH)
          }, true),
      )

    return sortHandler(filteredData, sortProps)
  }, [filterProps.activeFilters, newData, sortProps])

  const onLoadMoreRows = useCallback(async ({ startIndex, stopIndex }) => {
    // Do nothing for now
  }, [])

  const basicProps = useMemo(
    () => ({
      columns: displayedColumns,
      columnPicker: props => <ColumnPicker {...columnPickerProps} {...props} />,
      idFunction,
      loading,
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [displayedColumns, columnPickerProps],
  )

  const providerProps = useMemo(
    () => ({
      basicProps,
      filterProps,
      sortingProps: sortProps,
    }),
    [basicProps, filterProps, sortProps],
  )

  const tableProps = useMemo(
    () => ({
      rows: filteredAssigned ?? [],
      loading: loading,
      noRowsMessageKey: 'mtd/common:vulnerability.noDataLabel',
      onRowClick: handleRowClick,
    }),
    [filteredAssigned, handleRowClick, loading],
  )

  const tableTitle = undefined

  return (
    <Box className={container}>
      <Box className={content}>
        <ContentAreaPanel fullWidth fullHeight>
          <TableProvider {...providerProps}>
            <TableToolbar
              begin={tableTitle ? <Typography variant="h2">{tableTitle}</Typography> : null}
              end={
                <Box display="flex" alignItems="center">
                  <Box mb={6} mr={8}>
                    <Typography>{`${filteredAssigned.length} ${t('vulnerability.results')}`}</Typography>
                  </Box>
                </Box>
              }
              bottom={<AppliedFilterPanel {...filterProps} {...filterLabelProps} />}
            />
            <XGrid {...tableProps} />
          </TableProvider>
        </ContentAreaPanel>
      </Box>
    </Box>
  )
})

export default VulnerableOSDetails
