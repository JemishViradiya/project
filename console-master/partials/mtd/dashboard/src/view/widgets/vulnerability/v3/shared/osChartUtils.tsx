import type { TFunction } from 'i18next'
import React from 'react'

import type { Theme } from '@material-ui/core/styles'
import Icon from '@material-ui/core/SvgIcon'

import { MobileProtectData } from '@ues-data/mtd'
import { StatusCritical, StatusHigh, StatusLow, StatusMedium, StatusUnknown } from '@ues/assets'

import { getTotal } from './sortUtils'

const MAX_PLATFORM_CHARS = 7
const FONT_SIZE = 10
const MAX_BARS = 8
const SHOW_LABEL_THRESHOLD = 3

export enum OsChartType {
  Severity = 'severity',
  Endpoint = 'endpoint',
}

function getGrid() {
  return {
    left: '1%',
    right: '3%',
    bottom: '20',
    top: '20',
    containLabel: true,
  }
}

function getXAxis() {
  return {
    type: 'value',
    fontSize: FONT_SIZE,
  }
}

function getYAxisData(osData: MobileProtectData.OsCount) {
  const platform = osData.os.platform.substr(0, MAX_PLATFORM_CHARS)
  return {
    value: `${platform} ${osData.os.version} ${osData.os.securityPatch ? osData.os.securityPatch : ''}`,
    fontSize: FONT_SIZE,
  }
}

function getYAxis(ossData: MobileProtectData.SeverityAndEndpointCountsByOs[]) {
  return {
    type: 'category',
    data: ossData.map(osData => getYAxisData({ os: osData.os, endpointCount: osData.endpointCount })),
  }
}

export function getSeverityColor(severity: MobileProtectData.Severity, theme /*:Theme */) {
  return theme.palette.chipAlert[severity] ? theme.palette.chipAlert[severity] : theme.palette.chipAlert.info
}

export function getEndpointColor(theme /*:Theme */) {
  return theme.palette.chipAlert.info
}

function getSeriesData(value: number, max: number) {
  return {
    value: value,
    label: {
      show: (value * 100) / max > SHOW_LABEL_THRESHOLD,
    },
  }
}

function getBarMax(ossData: MobileProtectData.SeverityAndEndpointCountsByOs[]): number {
  let max = 0
  for (const osData of ossData) {
    max = Math.max(max, getTotal(osData.severityCount))
  }
  return max
}

function getSeveritySeries(
  ossData: MobileProtectData.SeverityAndEndpointCountsByOs[],
  severity: MobileProtectData.Severity,
  t: TFunction,
) {
  const max = getBarMax(ossData)
  return {
    name: t(severity),
    type: 'bar',
    stack: 'default',
    label: {
      position: 'insideRight',
    },
    data: ossData.map(osData => getSeriesData(osData.severityCount[severity], max)),
  }
}

function getEndpointSeries(ossData: MobileProtectData.SeverityAndEndpointCountsByOs[], t: TFunction) {
  const max = getBarMax(ossData)
  return {
    name: t('Endpoints'),
    type: 'bar',
    stack: 'default',
    label: {
      position: 'insideRight',
    },
    data: ossData.map(osData => getSeriesData(osData.endpointCount, max)),
  }
}

function getSeries(ossData: MobileProtectData.SeverityAndEndpointCountsByOs[], chartType: OsChartType, t: TFunction) {
  if (chartType === OsChartType.Severity) {
    const data = []
    for (const severity of Object.values(MobileProtectData.Severity)) {
      if (severity !== MobileProtectData.Severity.NONE) {
        data.push(getSeveritySeries(ossData, severity, t))
      }
    }
    return data
  } else if (chartType === OsChartType.Endpoint) {
    return getEndpointSeries(ossData, t)
  }
}

function getSeverityLegend(t: TFunction) {
  return {
    data: Object.values(MobileProtectData.Severity)
      .filter(severity => severity !== MobileProtectData.Severity.NONE)
      .map(severity => t(severity)),
  }
}

function getEndpointLegend(t: TFunction) {
  return {
    data: [t('Endpoints')],
  }
}

function getLegend(chartType: OsChartType, t: TFunction) {
  if (chartType === OsChartType.Severity) {
    return getSeverityLegend(t)
  } else if (chartType === OsChartType.Endpoint) {
    return getEndpointLegend(t)
  }
}

function getDataZoom(ossData: MobileProtectData.SeverityAndEndpointCountsByOs[]) {
  return [
    {
      type: 'slider',
      yAxisIndex: 0,
      zoomLock: true,
      startValue: 0,
      endValue: MAX_BARS,
      show: ossData.length > MAX_BARS,
      width: 10,
      right: 10,
      top: 20,
      bottom: 45,
      showDetail: false,
      realtime: false,
      backgroundColor: 'rgba(255,255,255,0)',
    },
  ]
}

export function getOption(
  ossData: MobileProtectData.SeverityAndEndpointCountsByOs[],
  chartType: OsChartType,
  t: TFunction,
  theme: Theme,
) {
  return {
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'shadow',
      },
    },
    legend: getLegend(chartType, t),
    grid: getGrid(),
    xAxis: getXAxis(),
    yAxis: getYAxis(ossData),
    series: getSeries(ossData, chartType, t),
    color: getColors(chartType, theme),
    dataZoom: getDataZoom(ossData),
  }
}

function getColors(chartType: OsChartType, theme: Theme) {
  if (chartType === OsChartType.Severity) {
    return Object.values(MobileProtectData.Severity)
      .filter(severity => severity !== MobileProtectData.Severity.NONE)
      .map(severity => getSeverityColor(severity, theme))
  } else if (chartType === OsChartType.Endpoint) {
    return getEndpointColor(theme)
  }
}

export function getSeverityIcon(severity: MobileProtectData.Severity) {
  let severityIcon
  if (severity === MobileProtectData.Severity.CRITICAL) {
    severityIcon = StatusCritical
  } else if (severity === MobileProtectData.Severity.HIGH) {
    severityIcon = StatusHigh
  } else if (severity === MobileProtectData.Severity.MEDIUM) {
    severityIcon = StatusMedium
  } else if (severity === MobileProtectData.Severity.LOW) {
    severityIcon = StatusLow
  } else {
    severityIcon = StatusUnknown
  }
  return <Icon component={severityIcon} fontSize="small" />
}
