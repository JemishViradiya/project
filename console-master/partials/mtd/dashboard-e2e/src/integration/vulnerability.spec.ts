/* eslint-disable no-restricted-globals */
/* eslint-disable no-unused-expressions */
import { FeatureName } from '@ues-data/shared-types'

import {
  bar,
  cardLabel,
  enableWidget,
  expectUrlParams,
  findWaitAllByRole,
  findWaitByRole,
  findWaitByXGridCell,
  getSearchParams,
  getUrlHashRoute,
  loadChartTypeStrings,
} from '../utils/utils'

const PLATFORM = 'XXX'
const VERSION = 'YYY'

const MTD_URI_PREFIX = '/uc/mtd-dashboard'

const MOBILE_DEVICES_URI = '/mobile-devices'
const VULNERABILITIES_DETAILS_URI = '/vulnerabilities/details'
const VULNERABILITIES_CVE_URI = '/vulnerabilities/cve'

describe('MTD Dashboard: Vulnerability', () => {
  before(() => {
    loadChartTypeStrings('mtd/common')
    I.visit('/', {
      onBeforeLoad: window => {
        window.localStorage.setItem('UES_DATA_MOCK', 'true')
        window.localStorage.setItem(FeatureName.UESCronosNavigation, 'true')
        window.localStorage.setItem(FeatureName.SingleNXApp, 'true')
      },
    })
  })

  it('Mobile OS with vulnerabilities - Bar - Clickthrough - Full', () => {
    enableWidget('vulnerableMobileOsChart')

    I.visitRoute('/dashboard')

    findWaitByRole('gridcell', { name: cardLabel(I.translate('dashboard.mobileOsWithVulnerabilities'), bar) })
      .contains(I.translate('common.total') as string)
      .click()

    I.location().then(url => {
      expect(url.pathname).equals(MTD_URI_PREFIX)
      expect(url.hash).equals('#' + VULNERABILITIES_DETAILS_URI)
      const searchParams = getSearchParams(url.hash)
      expect(searchParams.get('platform')).to.be.null
      expect(searchParams.get('version')).to.be.null
    })
    /*
    findWaitByRole('heading', { name: I.translate('vulnerability.osdetails.title1') }).should('exist')
    findWaitByRole('heading', { name: I.translate('vulnerability.osdetails.title2') }).should('exist')
    findWaitByRole('tab', { name: I.translate('vulnerability.mobileOs') }).should('exist')
    findWaitAllByRole('row').its('length').should('be.gte', 1)
    */
  })

  it('Mobile OS with vulnerabilities - Bar - Clickthrough - Partial', () => {
    enableWidget('vulnerableMobileOsChart')

    I.visitRoute('/dashboard')

    findWaitByRole('gridcell', { name: cardLabel(I.translate('dashboard.mobileOsWithVulnerabilities'), bar) })
      .findAllByRole('button', { name: '' })
      .first()
      .click()

    I.location().then(url => {
      expect(url.pathname).equals(MTD_URI_PREFIX)
      expect(getUrlHashRoute(url.hash)).equals(VULNERABILITIES_DETAILS_URI)
      const searchParams = getSearchParams(url.hash)
      expect(searchParams.get('platform')).to.have.length.gt(0)
      expect(searchParams.get('version')).to.have.length.gt(0)
    })
    /*
    findWaitByRole('heading', { name: I.translate('vulnerability.osdetails.title1') }).should('exist')
    findWaitByRole('heading', { name: I.translate('vulnerability.osdetails.title2') }).should('exist')
    findWaitByRole('tab', { name: I.translate('vulnerability.mobileOs') }).should('exist')
    findWaitAllByRole('row').its('length').should('eq', 1)
    */
  })

  it('Mobile OS with vulnerabilities - OS Details - Full', () => {
    I.visitRoute('/vulnerabilities/details')

    findWaitByRole('heading', { name: I.translate('vulnerability.osdetails.title1') }).should('exist')
    findWaitByRole('heading', { name: I.translate('vulnerability.osdetails.title2') }).should('exist')
    findWaitByRole('tab', { name: I.translate('vulnerability.mobileOs') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.platform') })
      .findByRole('button', { name: 'Filter column' })
      .should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.version') })
      .findByRole('button', { name: 'Filter column' })
      .should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.endpointCount') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.totalCve') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.criticalCve') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.highCve') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.mediumCve') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.lowCve') }).should('exist')

    findWaitAllByRole('row').its('length').should('be.gte', 1)
  })

  it('Mobile OS with vulnerabilities - OS Details - Partial', () => {
    I.visit(`#/vulnerabilities/details?platform=${PLATFORM}&version=${VERSION}`)

    findWaitByRole('heading', { name: I.translate('vulnerability.osdetails.title1') }).should('exist')
    findWaitByRole('heading', { name: I.translate('vulnerability.osdetails.title2') }).should('exist')
    findWaitByRole('tab', { name: I.translate('vulnerability.mobileOs') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.platform') })
      .findByRole('button', { name: 'Filter column' })
      .should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.version') })
      .findByRole('button', { name: 'Filter column' })
      .should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.endpointCount') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.totalCve') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.criticalCve') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.highCve') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.mediumCve') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.lowCve') }).should('exist')
    findWaitByRole('button', { name: `${I.translate('vulnerability.osdetails.platform')} Is in [${PLATFORM}]` }).should('exist')
    findWaitByRole('button', { name: `${I.translate('vulnerability.osdetails.version')} Contains ${VERSION}` }).should('exist')

    findWaitAllByRole('row').its('length').should('be.eq', 1)
  })

  it('Mobile OS with vulnerabilities - OS Details - Left Side Navigation', () => {
    I.visitRoute('/vulnerabilities')

    findWaitByRole('heading', { name: I.translate('vulnerability.osdetails.title1') }).should('exist')
    findWaitByRole('heading', { name: I.translate('vulnerability.osdetails.title2') }).should('exist')
    findWaitByRole('tab', { name: I.translate('vulnerability.mobileOs') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.platform') })
      .findByRole('button', { name: 'Filter column' })
      .should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.version') })
      .findByRole('button', { name: 'Filter column' })
      .should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.endpointCount') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.totalCve') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.criticalCve') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.highCve') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.mediumCve') }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.osdetails.lowCve') }).should('exist')
  })

  it('Mobile OS with vulnerabilities - OS Details - ClickThrough - Row', () => {
    I.visitRoute('/vulnerabilities/details')

    findWaitByXGridCell(2, 2 /*version*/).click()

    I.location().then(url => {
      expect(url.pathname).equals(MTD_URI_PREFIX)
      expect(getUrlHashRoute(url.hash)).equals(VULNERABILITIES_CVE_URI)
      const searchParams = getSearchParams(url.hash)
      expect(searchParams.get('platform')).to.have.length.gt(0)
      expect(searchParams.get('version')).to.have.length.gt(0)
      expect(searchParams.get('severity')).to.be.null
    })

    /*findWaitByRole('heading', { name: I.translate('vulnerability.cvedetails.title1') }).should('exist')*/
  })

  it('Mobile OS with vulnerabilities - ClickThrough - Mobile Device Table', () => {
    I.visitRoute('/vulnerabilities/details')

    const getParams = expectUrlParams()

    findWaitByXGridCell(2, 3 /*endpointCount*/).within(() => {
      findWaitByRole('link').click()
    })

    cy.then(() => {
      const searchParams = getParams(MOBILE_DEVICES_URI)
      expect(searchParams.get('osPlatform')).to.have.length.gt(0)
      expect(searchParams.get('osVersion')).to.have.length.gt(0)
      expect(searchParams.get('osSecurityPatch')).to.have.length.gt(0)
    })
  })

  it('Mobile OS with vulnerabilities - OS Details - ClickThrough - Total CVE', () => {
    I.visitRoute('/vulnerabilities/details')

    findWaitByXGridCell(2, 4 /*totalCVE*/).within(() => {
      findWaitByRole('link').click()
    })

    I.location().then(url => {
      expect(url.pathname).equals(MTD_URI_PREFIX)
      expect(getUrlHashRoute(url.hash)).equals(VULNERABILITIES_CVE_URI)
      const searchParams = getSearchParams(url.hash)
      expect(searchParams.get('platform')).to.have.length.gt(0)
      expect(searchParams.get('version')).to.have.length.gt(0)
      expect(searchParams.get('severity')).to.be.null
    })

    /*findWaitByRole('heading', { name: I.translate('vulnerability.cvedetails.title1') }).should('exist')*/
  })

  it('Mobile OS with vulnerabilities - OS Details - ClickThrough - Severity', () => {
    I.visitRoute('/vulnerabilities/details')

    findWaitByXGridCell(2, 5 /*critical*/).within(() => {
      findWaitByRole('link').click()
    })

    I.location().then(url => {
      expect(url.pathname).equals(MTD_URI_PREFIX)
      expect(getUrlHashRoute(url.hash)).equals(VULNERABILITIES_CVE_URI)
      const searchParams = getSearchParams(url.hash)
      expect(searchParams.get('platform')).to.have.length.gt(0)
      expect(searchParams.get('version')).to.have.length.gt(0)
      expect(searchParams.get('severity')).equals('critical')
    })

    /*
    findWaitByRole('heading', { name: I.translate('vulnerability.cvedetails.title1') }).should('exist')
    findWaitByRole('button', { name: `${I.translate('vulnerability.cvedetails.severity')} Is in [critical]` }).should('exist')
    */
  })

  it('Mobile OS with vulnerabilities - CVE - Full', () => {
    I.visitRoute(`/vulnerabilities/cve?platform=${PLATFORM}&version=${VERSION}`)

    findWaitByRole('heading', { name: I.translate('vulnerability.cvedetails.title1') }).should('exist')
    findWaitByRole('heading', { name: `${PLATFORM} ${VERSION}` }).should('exist')
    findWaitByRole('toolbar', { name: '' }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.cvedetails.severity') })
      .findByRole('button', { name: 'Filter column' })
      .should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.cvedetails.cveScore') })
      .findByRole('button', { name: 'Filter column' })
      .should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.cvedetails.cve') })
      .findByRole('button', { name: 'Filter column' })
      .should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.cvedetails.cveDescription') })
      .findByRole('button', { name: 'Filter column' })
      .should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.cvedetails.cveLastModifiedTime') }).should('exist')
    findWaitAllByRole('row').its('length').should('be.gte', 1)
  })

  it.skip('Mobile OS with vulnerabilities - CVE - Partial', () => {
    I.visitRoute(`/vulnerabilities/cve?platform=${PLATFORM}&version=${VERSION}&severity=critical`)

    findWaitByRole('heading', { name: I.translate('vulnerability.cvedetails.title1') }).should('exist')
    findWaitByRole('heading', { name: `${PLATFORM} ${VERSION}` }).should('exist')
    findWaitByRole('toolbar', { name: '' }).should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.cvedetails.severity') })
      .findByRole('button', { name: 'Filter column' })
      .should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.cvedetails.cveScore') })
      .findByRole('button', { name: 'Filter column' })
      .should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.cvedetails.cve') })
      .findByRole('button', { name: 'Filter column' })
      .should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.cvedetails.cveDescription') })
      .findByRole('button', { name: 'Filter column' })
      .should('exist')
    findWaitByRole('columnheader', { name: I.translate('vulnerability.cvedetails.cveLastModifiedTime') }).should('exist')
    findWaitByRole('button', {
      name: `${I.translate('vulnerability.cvedetails.severity')} Is in [${I.translate('vulnerability.severities.critical')}]`,
    }).should('exist')
    findWaitAllByRole('row').its('length').should('be.eq', 1)
  })

  it('Mobile OS with vulnerabilities - CVE - Go Back', () => {
    I.visitRoute(`/vulnerabilities/cve?platform=${PLATFORM}&version=${VERSION}`)
    findWaitByRole('button', { name: 'Go back' }).click()

    I.location().then(url => {
      expect(url.pathname).equals(MTD_URI_PREFIX)
      expect(url.hash).equals('#' + VULNERABILITIES_DETAILS_URI)
    })

    /*
    findWaitByRole('heading', { name: I.translate('vulnerability.osdetails.title1') }).should('exist')
    findWaitByRole('heading', { name: I.translate('vulnerability.osdetails.title2') }).should('exist')
    findWaitByRole('tab', { name: I.translate('vulnerability.mobileOs') }).should('exist')
    */
  })
})
