import type { AsyncQuery } from '@ues-data/shared'

import { VulnerabilitiesPermissions } from '../network'
import type { PagedResponse, Response } from '../types'
import { Vulnerability, VulnerabilityMock } from './vulnerability'
import type {
  CveSummary,
  Os,
  OsCount,
  OsDetails,
  OsFilter,
  SeverityAndEndpointCountsByOs,
  SeverityCounts,
  SeverityCountsByOs,
} from './vulnerability-types'

const OS_BATCH_SIZE = 10

interface OsAggregateData {
  totals: SeverityCounts
  ossCounts: SeverityAndEndpointCountsByOs[]
}

const getOsDataAggregate = api => async () => {
  const ossResult = await api.getOsCount()
  const ossResultData = ossResult.data
  const oss = ossResultData.map(os => os.os)
  const totals = await api.getSeverityCounts(oss)
  let idx = 0
  let ossSeverityCounts = []
  do {
    const ossBatch = oss.slice(idx, idx + OS_BATCH_SIZE)
    const severityData = await api.getSeverityCountsByOs(ossBatch)
    ossSeverityCounts = [...ossSeverityCounts, ...severityData.data]
    idx = idx + OS_BATCH_SIZE
  } while (idx < oss.length)

  const ossCounts = []
  for (const osSeverityCounts of ossSeverityCounts) {
    const osResultData =
      osSeverityCounts.os.securityPatch === undefined
        ? ossResultData.find(
            item =>
              item.os.platform === osSeverityCounts.os.platform &&
              item.os.version === osSeverityCounts.os.version &&
              item.os.securityPatch === null,
          )
        : ossResultData.find(
            item =>
              item.os.platform === osSeverityCounts.os.platform &&
              item.os.version === osSeverityCounts.os.version &&
              item.os.securityPatch === osSeverityCounts.os.securityPatch,
          )
    ossCounts.push({
      os: osSeverityCounts.os,
      severityCount: osSeverityCounts.severityCount,
      endpointCount: osResultData.endpointCount,
    })
  }
  return { totals: totals.data, ossCounts: ossCounts }
}

export const queryOsAggregateData: AsyncQuery<OsAggregateData, void> = {
  query: getOsDataAggregate(Vulnerability),
  mockQueryFn: getOsDataAggregate(VulnerabilityMock),
  permissions: VulnerabilitiesPermissions,
}

export const querySeverityCounts: AsyncQuery<Response<SeverityCounts>, { oss: Os[] }> = {
  query: ({ oss }) => Vulnerability.getSeverityCounts(oss),
  mockQueryFn: ({ oss }) => VulnerabilityMock.getSeverityCounts(oss),
  permissions: VulnerabilitiesPermissions,
}

const fetchSeverityCountsByOS = api => async (ossCounts: OsCount[]) => {
  let idx = 0
  let data = []
  const oss = ossCounts.map(os => os.os)
  do {
    const ossBatch = oss.slice(idx, idx + OS_BATCH_SIZE)
    const severityData = await api.getSeverityCountsByOs(ossBatch)
    data = [...data, ...severityData.data]
    idx = idx + OS_BATCH_SIZE
  } while (idx < oss.length)
  return data
}

export const querySeverityCountsByOs: AsyncQuery<SeverityCountsByOs[], OsCount[]> = {
  query: fetchSeverityCountsByOS(Vulnerability),
  mockQueryFn: fetchSeverityCountsByOS(VulnerabilityMock),
  permissions: VulnerabilitiesPermissions,
}

export const queryOsDetails: AsyncQuery<Response<PagedResponse<OsDetails>>, { oss: Os[]; filters: OsFilter[]; cursor: string }> = {
  query: ({ oss, filters, cursor }) => Vulnerability.getOsDetails(oss, filters, cursor),
  mockQueryFn: ({ oss, filters, cursor }) => VulnerabilityMock.getOsDetails(oss, filters, cursor),
  permissions: VulnerabilitiesPermissions,
}

const fetchCveInfo = api => async oss => {
  let cursor = null
  let data = []
  let cnt = 0
  do {
    const result = await api.getCveSummaries(oss, cursor)
    data = [...data, ...result.data.elements]
    cursor = result.data.next
    cnt = result.data.elements.length
  } while (cnt > 0)
  return data
}

export const queryCveInfo: AsyncQuery<CveSummary[], Os[]> = {
  query: fetchCveInfo(Vulnerability),
  mockQueryFn: fetchCveInfo(VulnerabilityMock),
  permissions: VulnerabilitiesPermissions,
}

export const queryCveSummaries: AsyncQuery<Response<PagedResponse<CveSummary>>, { oss: OsCount[]; cursor: string }> = {
  query: ({ oss, cursor }) =>
    Vulnerability.getCveSummaries(
      oss.map(os => os.os),
      cursor,
    ),
  mockQueryFn: ({ oss, cursor }) =>
    VulnerabilityMock.getCveSummaries(
      oss.map(os => os.os),
      cursor,
    ),
  permissions: VulnerabilitiesPermissions,
}

const findOsSeverityData = (os: Os, osSeverities: SeverityCountsByOs[]): SeverityCounts => {
  const osSeverity = osSeverities.find(
    item => os.platform === item.os.platform && os.version === item.os.version && os.securityPatch === item.os.securityPatch,
  )
  return osSeverity?.severityCount
}

const getOsDetailsInfo = (osCount: OsCount, osSeverities: SeverityCountsByOs[]): SeverityAndEndpointCountsByOs => {
  return { os: osCount.os, severityCount: findOsSeverityData(osCount.os, osSeverities), endpointCount: osCount.endpointCount }
}

const fetchOsDetailsInfo = api => async () => {
  const ossResult = await api.getOsCount()
  const ossResultData = ossResult.data
  if (ossResultData.length > 0) {
    const oss = ossResultData.map(os => os.os)
    const osSeveritiesResult = await api.getSeverityCountsByOs(oss)
    const osSeverities = osSeveritiesResult.data
    return ossResultData.map(osCount => getOsDetailsInfo(osCount, osSeverities))
  } else {
    return []
  }
}

export const queryOsDetailsInfo: AsyncQuery<SeverityAndEndpointCountsByOs[], void> = {
  query: fetchOsDetailsInfo(Vulnerability),
  mockQueryFn: fetchOsDetailsInfo(VulnerabilityMock),
  permissions: VulnerabilitiesPermissions,
}

const fetchOsSeverityInfo = api => async () => {
  const ossResult = await api.getOsCount()
  const ossResultData = ossResult.data
  if (ossResultData.length > 0) {
    const oss = ossResultData.map(os => os.os)
    const osSeveritiesResult = await api.getSeverityCountsByOs(oss)
    return osSeveritiesResult.data
  } else {
    return []
  }
}

export const queryOsSeverityInfo: AsyncQuery<SeverityCountsByOs[], void> = {
  query: fetchOsSeverityInfo(Vulnerability),
  mockQueryFn: fetchOsSeverityInfo(VulnerabilityMock),
  permissions: VulnerabilitiesPermissions,
}
