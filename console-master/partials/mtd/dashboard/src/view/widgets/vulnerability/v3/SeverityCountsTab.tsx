import ReactEcharts from 'echarts-for-react'
import React from 'react'
import { useTranslation } from 'react-i18next'

import Box from '@material-ui/core/Box'
import Paper from '@material-ui/core/Paper'
import { useTheme } from '@material-ui/core/styles'
import TableSortLabel from '@material-ui/core/TableSortLabel'

import type { MobileProtectData } from '@ues-data/mtd'
import { querySeverityCountsByOs } from '@ues-data/mtd'
import { useStatefulAsyncQuery } from '@ues-data/shared'
import { TableSortDirection, useSort } from '@ues/behaviours'

import { getOption, OsChartType } from './shared/osChartUtils'
import { ChartSortCriteria, panelChartSortHandler, sorterStyle } from './shared/sortUtils'
import type { TabProps } from './shared/useInfiniteTable'
import { Loading, NoData, useInfiniteTable } from './shared/useInfiniteTable'

interface ChartProps {
  ossData: MobileProtectData.SeverityAndEndpointCountsByOs[]
}

const SeverityCountsChart: React.FC<ChartProps> = ({ ossData }) => {
  const { t } = useTranslation(['mtd/common', 'mtd/vulnerability'])
  const theme = useTheme()

  const chartData = getOption(ossData, OsChartType.Severity, t, theme)

  const chartStyle = { width: '100%' }
  return <ReactEcharts option={chartData} style={chartStyle} />
}

function addEndpointCountData(
  countsData: MobileProtectData.SeverityCountsByOs[],
  ossData: MobileProtectData.OsCount[],
): MobileProtectData.SeverityAndEndpointCountsByOs[] {
  const ossCounts = []
  for (const osSeverityCounts of countsData) {
    ossCounts.push({
      os: osSeverityCounts.os,
      severityCount: osSeverityCounts.severityCount,
      endpointCount: 0,
    })
  }
  return ossCounts
}

const SeverityCountsTab: React.FC<TabProps> = React.memo(({ value, index, oss }) => {
  const { t } = useTranslation(['mtd/common', 'mtd/vulnerability'])

  const { classes } = useInfiniteTable()

  const sortProps = useSort(null, TableSortDirection.Asc)

  const severityData = useStatefulAsyncQuery(querySeverityCountsByOs, {
    variables: oss,
    skip: value !== index || oss.length === undefined || oss.length === 0,
  })
  const severityCountsData: MobileProtectData.SeverityCountsByOs[] =
    severityData === undefined || severityData.data === undefined ? [] : severityData.data
  let countsData: MobileProtectData.SeverityAndEndpointCountsByOs[] = addEndpointCountData(severityCountsData, oss)
  countsData = panelChartSortHandler(countsData, sortProps.sort as ChartSortCriteria, sortProps.sortDirection as TableSortDirection)

  const handleSortChange = (criteria: ChartSortCriteria): void => {
    const sortBy = criteria
    const sortDir = sortProps.sortDirection === TableSortDirection.Asc ? TableSortDirection.Desc : TableSortDirection.Asc
    sortProps.setSort(sortBy)
    sortProps.setSortDirection(sortDir)
  }

  return (
    value === index && (
      <Paper>
        <Box display="flex" flexDirection="column" height="90vh">
          <div style={sorterStyle}>
            <TableSortLabel
              onClick={() => handleSortChange(ChartSortCriteria.Os)}
              active={sortProps.sort === ChartSortCriteria.Os}
              direction={sortProps.sortDirection as any}
            >
              {t('osSort')}
            </TableSortLabel>
            <TableSortLabel
              onClick={() => handleSortChange(ChartSortCriteria.Total)}
              active={sortProps.sort === ChartSortCriteria.Total}
              direction={sortProps.sortDirection as any}
            >
              {t('totalSort')}
            </TableSortLabel>
            <TableSortLabel
              onClick={() => handleSortChange(ChartSortCriteria.Severity)}
              active={sortProps.sort === ChartSortCriteria.Severity}
              direction={sortProps.sortDirection as any}
            >
              {t('severitySort')}
            </TableSortLabel>
          </div>
          <div>{!severityData.loading && <SeverityCountsChart ossData={countsData} />}</div>
          <div>
            {severityData.loading && (
              <div>
                <Loading style={classes}></Loading>
                <NoData noDataLabel={t('noDataLabel')} />
              </div>
            )}
          </div>
        </Box>
      </Paper>
    )
  )
})

export default SeverityCountsTab
