import ReactEcharts from 'echarts-for-react'
import React from 'react'
import { useTranslation } from 'react-i18next'

import { makeStyles, useTheme } from '@material-ui/core/styles'

import type { ChartProps } from '@ues-behaviour/dashboard'
import { ChartHeader, TotalCount, useDashboard } from '@ues-behaviour/dashboard'
import type { MobileProtectData } from '@ues-data/mtd'
import { queryOsAggregateData } from '@ues-data/mtd'
import { useStatefulAsyncQuery } from '@ues-data/shared'

import { getOption, OsChartType } from './shared/osChartUtils'
import { ChartSortCriteria, getTotal, SortSelector, widgetChartSortHandler } from './shared/sortUtils'

interface SeverityChartProps {
  ossData: MobileProtectData.SeverityAndEndpointCountsByOs[]
  height: number
  onInteraction?: (ossData: MobileProtectData.SeverityAndEndpointCountsByOs[]) => void
}

const useStyles = makeStyles(theme => ({
  chartContainer: {
    height: '100%',
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: theme.spacing(3),
    paddingRight: theme.spacing(3),
  },
  chartHeader: {
    paddingBottom: 0,
  },
}))

const SeverityCountsChart: React.FC<SeverityChartProps> = ({ ossData, height, onInteraction }) => {
  const { t } = useTranslation(['mtd/common', 'mtd/vulnerability'])
  const theme = useTheme()

  const chartData = getOption(ossData, OsChartType.Severity, t, theme)

  const chartStyle = { height: `${height}px`, width: '100%' }
  return (
    <ReactEcharts
      option={chartData}
      style={chartStyle}
      onEvents={typeof onInteraction === 'function' ? { click: onInteraction } : undefined}
    />
  )
}

const MobileOsVulnerabilitiesBarChart: React.FC<ChartProps> = ({ height }) => {
  const { setDrillDownOpen, setDrillDownContext } = useDashboard()
  const styles = useStyles()
  const theme = useTheme()

  let ossCounts: MobileProtectData.SeverityAndEndpointCountsByOs[] = []
  let totals = { critical: 0, high: 0, medium: 0, low: 0, none: 0 } as MobileProtectData.SeverityCounts
  const ossResult = useStatefulAsyncQuery(queryOsAggregateData, {})
  if (ossResult.data !== undefined) {
    totals = ossResult.data.totals
    ossCounts = widgetChartSortHandler(ossResult.data.ossCounts, ChartSortCriteria.Os)
  }

  const handleSortSelect = event => {
    ossCounts = widgetChartSortHandler(ossCounts, event.target.value)
  }

  const handleOpenDrillDown = (): void => {
    setDrillDownContext({ chartId: 'vulnerableOsChart', context: ossCounts })
    setDrillDownOpen(true)
  }

  const chartHeight = height - theme.spacing(24)
  return (
    <div className={styles.chartContainer}>
      <ChartHeader className={styles.chartHeader}>
        <TotalCount count={getTotal(totals).toString()} description={''} onInteraction={() => handleOpenDrillDown()} />
        <SortSelector handleChange={handleSortSelect} />
      </ChartHeader>
      <SeverityCountsChart ossData={ossCounts} height={chartHeight} onInteraction={() => handleOpenDrillDown()} />
    </div>
  )
}

export default MobileOsVulnerabilitiesBarChart
