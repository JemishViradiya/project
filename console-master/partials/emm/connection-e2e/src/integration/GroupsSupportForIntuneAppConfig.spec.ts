/* eslint-disable no-restricted-globals */

import { emm_connection_json } from '../support/commands'
import { addIntuneAppConfigPolicies } from '../support/page-objects/addIntuneAppConfigPolicies.page'
import { AddIntuneConnectionPage } from '../support/page-objects/addintuneconnection.page'
import { AddUemConnectionPage } from '../support/page-objects/adduemconnection.page'
import { Header_Panel } from '../support/page-objects/header_pannel.page'
import { setting_emmconnections } from '../support/page-objects/settings-emmconnections.page'

describe('emm connection', () => {
  const setting_emmconnections_page = new setting_emmconnections()
  const headerpannelpage = new Header_Panel()
  const addintuneconnection = new AddIntuneConnectionPage()
  const addIntuneAppConfig = new addIntuneAppConfigPolicies()
  const adduemconnection = new AddUemConnectionPage()
  const azureTenantID = '84f373e8-8167-43cb-afff-f11bf93e421c'
  const UEMTenantID = 'L63224054'
  before(() => {
    I.loadI18nNamespaces('emm/connection').then(() => {
      I.setMocks()
      window.localStorage.setItem('UES.MockDataBypassMode.Enabled', 'true')
      I.fixture(emm_connection_json).then(Connections => {
        I.intercept('GET', '**/api/platform/v1/emm/types', [Connections.EMMConnections.ConnectionsList[0]])
      })
      I.visit('#/emm/intune/appconfig')
    })
  })
  beforeEach(() => {
    window.localStorage.setItem('UES.MockDataBypassMode.Enabled', 'true')
  })
  it('Should load Navigation and title of the page should be Add Microsoft Intune app configuration policies', () => {
    headerpannelpage.getNavigation().should('exist').and('be.visible')
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
  })
  it('Android: On the app configuration page Android section Android switch button is checked by default, there is heading for the group section "Assign to groups" and switch button "All group" unchecked by default shows under it.', () => {
    I.setMocks()
    addIntuneAppConfig.getAndroidSwitchButton().should('exist').and('be.checked')
    addIntuneAppConfig.getAndroidSwitchButtonLabel().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupAssignmentTitleForAndroid().should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidAllGroupsButton().should('exist').and('not.be.checked')
    addIntuneAppConfig.getAndroidAllGroupsButtonText().should('exist').and('be.visible')
  })
  it('Android: There should be a grid table show up under "All group" and The grid table header include "GROUP NAME" and a plus button shows up in the header of the grid just after "GROUP NAME"', () => {
    I.setMocks()
    addIntuneAppConfig.getAndroidTableHeader().should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').and('be.visible')
  })
  it('Android: Before add a group, there is no group names should show up and it should show "no item" text under the table grid', () => {
    addIntuneAppConfig.getAndroidTableHeader().should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableNoDataMessage().should('exist').and('be.visible')
  })
  //A pop-up should appear with the heading "Add a group" and description "Select groups to add to the app config", A Search box should be present under the description text and A list of available groups should appear under it
  it('Android: After Click on the plus button, A pop-up should appear with the heading, description, search box and A list of available groups should appear under it', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    addIntuneAppConfig.getAndroidTableHeader().should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxHeading().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxDescriptionText().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchButton().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
  })
  it('Android: Search Box should have Label text: "Search for groups" and A search button at the end', () => {
    I.setMocks()
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchBoxLabelText().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchButton().should('exist').and('be.visible')
  })
  it('Android: After Type a group name in the search box for searching a group a cross button should appear for deleting clearing the search field and after clicking on that button, Searched text should be cleared', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=group_123', Connections.SearchedGroups)
    })
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('exist').and('be.visible').type('group_123')
    addIntuneAppConfig
      .getGroupsDailogBoxSearchBox()
      .parent()
      .parent()
      .findByLabelText(I.translate('emm.appConfig.groupAssignment.searchText'))
      .should('exist')
      .and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('have.value', 'group_123')
    addIntuneAppConfig.getGroupsDailogBoxSearchButton().should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('have.value', '')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').and('be.visible').click()
  })
  it('Android: Should list All the available groups from API and there should be a checkbox for selecting the groups', () => {
    const UEM = []
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
      for (let i = 0; i < Connections.groups.groups.length; i++) {
        UEM.push(Connections.groups.groups[i].displayName)
      }
    })
    addIntuneAppConfig
      .getAndroidTableHeaderPlusButton()
      .should('exist')
      .click()
      .then(list => {
        for (let i = 0; i < UEM.length; i++) {
          addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox(UEM[i]).should('exist').scrollIntoView()
          addIntuneAppConfig.getGroupsDailogBoxGroupName(UEM[i]).should('exist').and('be.visible')
        }
        addIntuneAppConfig.getGroupsDailogBoxList().children().its('length').should('eq', UEM.length)
        addIntuneAppConfig.getGroupsDailogBoxCancelButton().should('exist').and('be.visible').click()
      })
  })
  it('Android: For search the particular group, Type the full name of few characters of the group name, The searched group should appear in the Available groups list', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=group_123', Connections.SearchedGroups)
    })
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_1').should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('exist').and('be.visible').type('group_123')
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_1').should('not.exist')
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_123').should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_123').should('exist')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().click()
  })
  it('Android: Search the group which doesnt exist and after doing this, In the list of available groups should be empty and should show "No results" Text', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    I.fixture(emm_connection_json).then(Connections => {
      Connections.groups.groups = []
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=k', Connections.groups)
    })
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxHeading().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('exist').and('be.visible').type('k')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxNoResultsText().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxNoResultsText().should('not.exist')
    addIntuneAppConfig.getGroupsDailogBoxSearchButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().click()
  })
  it('Android: Cancel and Save Button should be present at the pop-up and the Add Button should be disabled by default and after selecting the group it should be enabled', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })

    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxHeading().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').and('be.visible').and('be.disabled')
    addIntuneAppConfig.getGroupsDailogBoxCancelButton().should('exist').and('be.visible').and('be.enabled')
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_4').should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').and('be.visible').and('be.enabled')
    addIntuneAppConfig.getGroupsDailogBoxCancelButton().should('exist').and('be.visible').and('be.enabled')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_4').should('exist').and('be.checked')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().click()
  })
  it('Android: After selecting one or more than one group, A list should appear of selected groups names with the cross button', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })

    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxHeading().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').and('be.visible').and('be.disabled')
    addIntuneAppConfig.getGroupsDailogBoxCancelButton().should('exist').and('be.visible').and('be.enabled')
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_4').should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').click()
    addIntuneAppConfig.getSelectedGroupsInDailogBox('group_4').should('exist').and('be.visible')
    addIntuneAppConfig.getSelectedGroupsInDailogBox('group_1').should('exist').and('be.visible')
    addIntuneAppConfig.getCrossButtonForSelectedGroupInDailogBox('group_4').should('exist').and('be.visible')
  })
  it('Android: After click on the cross button from the group name, The group should be unselected', () => {
    I.setMocks()
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getSelectedGroupsInDailogBox('group_4').should('exist').and('be.visible')
    addIntuneAppConfig.getSelectedGroupsInDailogBox('group_1').should('exist').and('be.visible')
    addIntuneAppConfig.getCrossButtonForSelectedGroupInDailogBox('group_4').should('exist').and('be.visible').click()
    addIntuneAppConfig.getSelectedGroupsInDailogBox('group_4').should('not.exist')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_4').should('exist').and('not.be.checked')
  })
  it('Android: For unselect the group after selecting the group, click on the group name again', () => {
    I.setMocks()
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getSelectedGroupsInDailogBox('group_1').should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('be.checked')
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_1').should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('not.be.checked')
  })
  // The Groups should not be added to the Grid view and when click on the plus button again the earlier selected groups should be unselected.
  it('Android: There should be a Cross button at the top right corner of the DialogBox, When we click on it, It should redirect to the  app configuration page', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('not.be.checked')
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_1').should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('be.checked')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').and('be.visible').click()
    addIntuneAppConfig.getAndroidSelectedGroup('group_1').should('not.exist')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('not.be.checked')
  })
  // The Groups should not be added to the Grid view and when click on the plus button again the earlier selected groups should be unselected
  it('Android: There should be a Cancel button in the DialogBox, When we click on it, It should redirect to the  app configuration page', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('not.be.checked')
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_1').should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('be.checked')
    addIntuneAppConfig.getGroupsDailogBoxCancelButton().should('exist').and('be.visible').click()
    addIntuneAppConfig.getAndroidSelectedGroup('group_1').should('not.exist')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('not.be.checked')
  })
  it('Android: For Adding the groups, Select the group first and after selection the disabled Add button should be enabled, click on the Add button the groups dialogbox should be removed', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').and('be.visible').and('be.disabled')
    addIntuneAppConfig.getGroupsDailogBoxCancelButton().should('exist').and('be.visible').and('be.enabled')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('not.be.checked')
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_1').should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_2').should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_3').should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('be.checked')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_2').should('exist').and('be.checked')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_3').should('exist').and('be.checked')
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').and('be.visible').and('be.enabled').click()
    addIntuneAppConfig.getGroupsDailogBox().should('not.exist')
  })
  it('Android: After click on the Add button it should redirect to the app configuration page, They should appear in the grid which is present under "All group", Verify the groups name shows up correctly and there is a delete button at the end for each group', () => {
    I.setMocks()
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidSelectedGroup('group_1').should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidSelectedGroup('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidSelectedGroup('group_3').should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidSelectedGroupDeleteButton('group_1').should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidSelectedGroupDeleteButton('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidSelectedGroupDeleteButton('group_3').should('exist').and('be.visible')
  })
  it('Android: For Deleting the group from the selected groups grid view, Click on the Delete button present at the end of the group name, After clicking on the delete button the group should be removed from the list', () => {
    I.setMocks()
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidSelectedGroup('group_1').should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidSelectedGroup('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidSelectedGroup('group_3').should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidSelectedGroupDeleteButton('group_1').should('exist').and('be.visible').click()
    addIntuneAppConfig.getAndroidSelectedGroupDeleteButton('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidSelectedGroupDeleteButton('group_3').should('exist').and('be.visible').click()
    addIntuneAppConfig.getAndroidSelectedGroup('group_1').should('not.exist')
    addIntuneAppConfig.getAndroidSelectedGroup('group_3').should('not.exist')
  })
  it('Android: If any group is added to the Assing to Group Grid, When we click on the plus button for adding more groups then the previously added group should be greyed out', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidSelectedGroup('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_2').should('exist').and('have.attr', 'aria-disabled', 'true')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').click()
    addIntuneAppConfig.getAndroidSelectedGroupDeleteButton('group_2').should('exist').click()
  })
  it('Android: Enable the "All group" button, the grid table disappear right away and after enabling it, All the content should appear back', () => {
    I.setMocks()
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeader().should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidAllGroupsButton().should('exist').and('not.be.checked')
    addIntuneAppConfig.getAndroidAllGroupsButton().click()
    addIntuneAppConfig.getAndroidTableHeader().should('not.exist')
    addIntuneAppConfig.getAndroidAllGroupsButton().click()
    addIntuneAppConfig.getAndroidTableHeader().should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').and('be.visible')
  })
  it('Android: Disable "Android" switch button, all the content under "Android" disappear including the "Assign to groups", "All group" switch button and grid table', () => {
    I.setMocks()
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeader().should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidAllGroupsButton().should('exist').and('not.be.checked')
    addIntuneAppConfig.getAndroidSwitchButton().should('exist').and('be.checked')
    addIntuneAppConfig.getAndroidSwitchButton().click()
    addIntuneAppConfig.getAndroidAllGroupsButton().should('not.exist')
    addIntuneAppConfig.getAndroidTableHeader().should('not.exist')
    addIntuneAppConfig.getAndroidTargetedNameTextBox().should('not.exist')
    addIntuneAppConfig.getAndroidSwitchButton().click()
    addIntuneAppConfig.getAndroidTargetedNameTextBox().should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidAllGroupsButton().should('exist').and('not.be.checked')
    addIntuneAppConfig.getAndroidTableHeader().should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').and('be.visible')
  })
  it('Android: If any group is added to the Assing to Group Grid, Check from Add Groups list the added group should be greyed out, Unselect the group from the selected List and Add it again, the group should be added successfully', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_2').should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').click()
    addIntuneAppConfig.getAndroidSelectedGroup('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_2').should('exist').and('have.attr', 'aria-disabled', 'true')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').click()
    addIntuneAppConfig.getAndroidSelectedGroupDeleteButton('group_2').should('exist').click()
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_2').should('exist').and('have.attr', 'aria-disabled', 'false').click()
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').click()
    addIntuneAppConfig.getAndroidSelectedGroup('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidSelectedGroupDeleteButton('group_2').should('exist').click()
  })
  // Ios TEST CASES
  it('Ios: On the app configuration page Ios section Ios switch button is checked by default, there is heading for the group section "Assign to groups" and switch button "All group" unchecked by default shows under it.', () => {
    I.setMocks()
    addIntuneAppConfig.getIosSwitchButton().should('exist').and('be.checked').scrollIntoView()
    addIntuneAppConfig.getIosSwitchButtonLabel().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupAssignmentTitleForIos().should('exist').and('be.visible')
    addIntuneAppConfig.getIosAllGroupsButton().should('exist').and('not.be.checked')
    addIntuneAppConfig.getIosAllGroupsButtonText().should('exist').and('be.visible')
  })
  it('Ios: There should be a grid table show up under "All group" and The grid table header include "GROUP NAME" and a plus button shows up in the header of the grid just after "GROUP NAME"', () => {
    I.setMocks()
    addIntuneAppConfig.getIosTableHeader().should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').and('be.visible')
  })
  it('Ios: Before add a group, there is no group names should show up and it should show "no item" text under the table grid', () => {
    addIntuneAppConfig.getIosTableHeader().should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableNoDataMessage().should('exist').and('be.visible')
  })
  //A pop-up should appear with the heading "Add a group" and description "Select groups to add to the app config", A Search box should be present under the description text and A list of available groups should appear under it
  it('Ios: After Click on the plus button, A pop-up should appear with the heading, description, search box and A list of available groups should appear under it', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    addIntuneAppConfig.getIosTableHeader().should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxHeading().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxDescriptionText().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchBoxLabelText().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchButton().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
  })
  it('Ios: Search Box should have Label text: "Search for groups" and A search button at the end', () => {
    I.setMocks()
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchBoxLabelText().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchButton().should('exist').and('be.visible')
  })
  it('Ios: After Type a group name in the search box for searching a group a cross button should appear for deleting clearing the search field and after clicking on that button, Searched text should be cleared', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=group_123', Connections.SearchedGroups)
    })
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('exist').and('be.visible').type('group_123')
    addIntuneAppConfig
      .getGroupsDailogBoxSearchBox()
      .parent()
      .parent()
      .findByLabelText(I.translate('emm.appConfig.groupAssignment.searchText'))
      .should('exist')
      .and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('have.value', 'group_123')
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_1').should('not.exist')
    addIntuneAppConfig.getGroupsDailogBoxSearchButton().should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('have.value', '')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').and('be.visible').click()
  })
  it('Ios: Should list All the available groups from API and there should be a checkbox for selecting the groups', () => {
    const UEM = []
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
      for (let i = 0; i < Connections.groups.groups.length; i++) {
        UEM.push(Connections.groups.groups[i].displayName)
      }
    })
    addIntuneAppConfig
      .getIosTableHeaderPlusButton()
      .should('exist')
      .click()
      .then(list => {
        for (let i = 0; i < UEM.length; i++) {
          addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox(UEM[i]).should('exist').scrollIntoView()
          addIntuneAppConfig.getGroupsDailogBoxGroupName(UEM[i]).should('exist').and('be.visible')
        }
        addIntuneAppConfig.getGroupsDailogBoxList().children().its('length').should('eq', UEM.length)
        addIntuneAppConfig.getGroupsDailogBoxCancelButton().should('exist').and('be.visible').click()
      })
  })
  it('Ios: For search the particular group, Type the full name of few characters of the group name, The searched group should appear in the Available groups list', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=group_123', Connections.SearchedGroups)
    })
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_1').should('exist')
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('exist').and('be.visible').type('group_123')
    addIntuneAppConfig.getGroupsDailogBoxSearchButton().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_1').should('not.exist')
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_123').should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_123').should('exist')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().click()
  })
  it('Ios: Search the group which doesnt exist and after doing this, In the list of available groups should be empty and should show "No results" Text', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    I.fixture(emm_connection_json).then(Connections => {
      Connections.groups.groups = []
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=k', Connections.groups)
    })
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxHeading().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('exist').and('be.visible').type('k')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxNoResultsText().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxNoResultsText().should('not.exist')
    addIntuneAppConfig.getGroupsDailogBoxSearchButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().click()
  })
  it('Ios: Cancel and Save Button should be present at the pop-up and the Add Button should be disabled by default and after selecting the group it should be enabled', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxHeading().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').and('be.visible').and('be.disabled')
    addIntuneAppConfig.getGroupsDailogBoxCancelButton().should('exist').and('be.visible').and('be.enabled')
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_4').should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').and('be.visible').and('be.enabled')
    addIntuneAppConfig.getGroupsDailogBoxCancelButton().should('exist').and('be.visible').and('be.enabled')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_4').should('exist').and('be.checked')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().click()
  })
  it('Ios: After selecting one or more than one group, A list should appear of selected groups names with the cross button', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxHeading().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxSearchBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').and('be.visible').and('be.disabled')
    addIntuneAppConfig.getGroupsDailogBoxCancelButton().should('exist').and('be.visible').and('be.enabled')
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_4').should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').click()
    addIntuneAppConfig.getSelectedGroupsInDailogBox('group_4').should('exist').and('be.visible')
    addIntuneAppConfig.getSelectedGroupsInDailogBox('group_1').should('exist').and('be.visible')
    addIntuneAppConfig.getCrossButtonForSelectedGroupInDailogBox('group_4').should('exist').and('be.visible')
  })
  it('Ios: After click on the cross button from the group name, The group should be unselected', () => {
    I.setMocks()
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getSelectedGroupsInDailogBox('group_4').should('exist').and('be.visible')
    addIntuneAppConfig.getSelectedGroupsInDailogBox('group_1').should('exist').and('be.visible')
    addIntuneAppConfig.getCrossButtonForSelectedGroupInDailogBox('group_4').should('exist').and('be.visible').click()
    addIntuneAppConfig.getSelectedGroupsInDailogBox('group_4').should('not.exist')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_4').should('exist').and('not.be.checked')
  })
  it('Ios: For unselect the group after selecting the group, click on the group name again', () => {
    I.setMocks()
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getSelectedGroupsInDailogBox('group_1').should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('be.checked')
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_1').should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('not.be.checked')
  })
  // The Groups should not be added to the Grid view and when click on the plus button again the earlier selected groups should be unselected.
  it('Ios: There should be a Cross button at the top right corner of the DialogBox, When we click on it, It should redirect to the  app configuration page', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('not.be.checked')
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_1').should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('be.checked')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').and('be.visible').click()
    addIntuneAppConfig.getIosSelectedGroup('group_1').should('not.exist')
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('not.be.checked')
  })
  // The Groups should not be added to the Grid view and when click on the plus button again the earlier selected groups should be unselected
  it('Ios: There should be a Cancel button in the DialogBox, When we click on it, It should redirect to the  app configuration page', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('not.be.checked')
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_1').should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('be.checked')
    addIntuneAppConfig.getGroupsDailogBoxCancelButton().should('exist').and('be.visible').click()
    addIntuneAppConfig.getIosSelectedGroup('group_1').should('not.exist')
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('not.be.checked')
  })
  it('Ios: For Adding the groups, Select the group first and after selection the disabled Add button should be enabled, click on the Add button the groups dialogbox should be removed', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    addIntuneAppConfig.getGroupsDailogBoxList().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').and('be.visible').and('be.disabled')
    addIntuneAppConfig.getGroupsDailogBoxCancelButton().should('exist').and('be.visible').and('be.enabled')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('not.be.checked')
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_1').should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_2').should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_3').should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_1').should('exist').and('be.checked')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_2').should('exist').and('be.checked')
    addIntuneAppConfig.getGroupsDailogBoxGroupCheckBox('group_3').should('exist').and('be.checked')
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').and('be.visible').and('be.enabled').click()
    addIntuneAppConfig.getGroupsDailogBox().should('not.exist')
  })
  it('Ios: After click on the Add button it should redirect to the app configuration page, Groups should appear in the grid which is present under "All group", Verify the groups name shows up correctly and there is a delete button at the end for each group', () => {
    I.setMocks()
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getIosSelectedGroup('group_1').should('exist').and('be.visible')
    addIntuneAppConfig.getIosSelectedGroup('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getIosSelectedGroup('group_3').should('exist').and('be.visible')
    addIntuneAppConfig.getIosSelectedGroupDeleteButton('group_1').should('exist').and('be.visible')
    addIntuneAppConfig.getIosSelectedGroupDeleteButton('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getIosSelectedGroupDeleteButton('group_3').should('exist').and('be.visible')
  })
  it('Ios: For Deleting the group from the selected groups grid view, Click on the Delete button present at the end of the group name, After clicking on the delete button the group should be removed from the list', () => {
    I.setMocks()
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getIosSelectedGroup('group_1').should('exist').and('be.visible')
    addIntuneAppConfig.getIosSelectedGroup('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getIosSelectedGroup('group_3').should('exist').and('be.visible')
    addIntuneAppConfig.getIosSelectedGroupDeleteButton('group_1').should('exist').and('be.visible').click()
    addIntuneAppConfig.getIosSelectedGroupDeleteButton('group_3').should('exist').and('be.visible').click()
    addIntuneAppConfig.getIosSelectedGroup('group_1').should('not.exist')
    addIntuneAppConfig.getIosSelectedGroup('group_3').should('not.exist')
    addIntuneAppConfig.getIosSelectedGroup('group_2').should('exist').and('be.visible')
  })
  it('Ios: If any group is added to the Assing to Group Grid, When we click on the plus button for adding more groups then the previously added group should be greyed out', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getIosSelectedGroup('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_2').should('exist').and('have.attr', 'aria-disabled', 'true')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').click()
    addIntuneAppConfig.getIosSelectedGroupDeleteButton('group_2').should('exist').click()
  })
  it('Ios: Enable the "All group" button, the grid table disappear right away and after enabling it, All the content should appear back', () => {
    I.setMocks()
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableHeader().should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').and('be.visible')
    addIntuneAppConfig.getIosAllGroupsButton().should('exist').and('not.be.checked')
    addIntuneAppConfig.getIosAllGroupsButton().click()
    addIntuneAppConfig.getIosTableHeader().should('not.exist')
    addIntuneAppConfig.getIosAllGroupsButton().click()
    addIntuneAppConfig.getIosTableHeader().should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').and('be.visible')
  })
  it('Ios: Disable "Ios" switch button, all the content under "Ios" disappear including the "Assign to groups", "All group" switch button and grid table', () => {
    I.setMocks()
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableHeader().should('exist').and('be.visible').scrollIntoView()
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').and('be.visible')
    addIntuneAppConfig.getIosAllGroupsButton().should('exist').and('not.be.checked')
    addIntuneAppConfig.getIosSwitchButton().should('exist').and('be.checked')
    addIntuneAppConfig.getIosSwitchButton().click()
    addIntuneAppConfig.getIosAllGroupsButton().should('not.exist')
    addIntuneAppConfig.getIosTableHeader().should('not.exist')
    addIntuneAppConfig.getIosTargetedNameTextBox().should('not.exist')
    addIntuneAppConfig.getIosSwitchButton().click()
    addIntuneAppConfig.getIosTargetedNameTextBox().should('exist').and('be.visible')
    addIntuneAppConfig.getIosAllGroupsButton().should('exist').and('not.be.checked').scrollIntoView()
    addIntuneAppConfig.getIosTableHeader().should('exist').and('be.visible').scrollIntoView()
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').and('be.visible')
  })
  it('Android/Ios: Verify same groups can show under the Android grid table and Ios grid table and select same groups', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_2').should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').click()
    addIntuneAppConfig.getIosTableHeaderPlusButton().click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_2').should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').click()
    addIntuneAppConfig.getAndroidSelectedGroup('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getIosSelectedGroup('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidSelectedGroupDeleteButton('group_2').should('exist').and('be.visible').click()
    addIntuneAppConfig.getIosSelectedGroupDeleteButton('group_2').should('exist').and('be.visible').click()
  })
  it('Ios: If any group is added to the Assing to Group Grid, Check from Add Groups list the added group should be greyed out, Unselect the group from the selected List and Add it again, The group should be added successfully', () => {
    I.setMocks()
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', Connections.groups)
    })
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_2').should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').click()
    addIntuneAppConfig.getIosSelectedGroup('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_2').should('exist').and('have.attr', 'aria-disabled', 'true')
    addIntuneAppConfig.getGroupsDailogBoxCrossButton().should('exist').click()
    addIntuneAppConfig.getIosSelectedGroupDeleteButton('group_2').should('exist').click()
    addIntuneAppConfig.getIosTableHeaderPlusButton().should('exist').click()
    addIntuneAppConfig.getGroupsDailogBoxGroupName('group_2').should('exist').and('have.attr', 'aria-disabled', 'false').click()
    addIntuneAppConfig.getGroupsDailogBoxAddButton().should('exist').click()
    addIntuneAppConfig.getIosSelectedGroup('group_2').should('exist').and('be.visible')
    addIntuneAppConfig.getIosSelectedGroupDeleteButton('group_2').should('exist').click()
  })

  it('Ios: Error For 403 StatusCode,	The permission not granted to access this Intune resource', () => {
    I.setMocks()
    cy.on('uncaught:exception', err => {
      expect(err.message).to.include('Request failed with status code 403')
      return false
    })
    I.visit('#/emm/intune/appconfig')
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', req => {
        req.reply(res => {
          res.send(403, Connections.NoPermissionForIntuneResource)
        })
      })
    })
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableHeader().scrollIntoView().should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableHeaderPlusButton().scrollIntoView().should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxHeading().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxDescriptionText().should('exist').and('be.visible')
    addIntuneAppConfig.getDefaultErrorMessage().should('exist').and('be.visible')
  })
  it('Ios: Error For 404 StatusCode, Credential not found', () => {
    I.setMocks()
    cy.on('uncaught:exception', err => {
      expect(err.message).to.include('Request failed with status code 404')
      return false
    })
    I.visit('#/emm/intune/appconfig')
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', req => {
        req.reply(res => {
          res.send(404, Connections.DeleteConnectionError)
        })
      })
    })
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableHeader().scrollIntoView().should('exist').and('be.visible')
    addIntuneAppConfig.getIosTableHeaderPlusButton().scrollIntoView().should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxHeading().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxDescriptionText().should('exist').and('be.visible')
    addIntuneAppConfig.getDefaultErrorMessage().should('exist').and('be.visible')
  })
  it('Android: Error For 403 StatusCode, The permission not granted to access this Intune resource', () => {
    I.setMocks()
    cy.on('uncaught:exception', err => {
      expect(err.message).to.include('Request failed with status code 403')
      return false
    })
    I.visit('#/emm/intune/appconfig')
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', req => {
        req.reply(res => {
          res.send(403, Connections.NoPermissionForIntuneResource)
        })
      })
    })
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeader().should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().scrollIntoView().should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxHeading().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxDescriptionText().should('exist').and('be.visible')
    addIntuneAppConfig.getDefaultErrorMessage().should('exist').and('be.visible')
  })
  it('Android: Error For 404 StatusCode, Credential not found', () => {
    I.setMocks()
    cy.on('uncaught:exception', err => {
      expect(err.message).to.include('Request failed with status code 404')
      return false
    })
    I.visit('#/emm/intune/appconfig')
    I.fixture(emm_connection_json).then(Connections => {
      I.intercept('GET', '**/v1/emm/types/Intune/groups?query=', req => {
        req.reply(res => {
          res.send(404, Connections.DeleteConnectionError)
        })
      })
    })
    headerpannelpage.getHeading(I.translate('emm.appConfig.title')).should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeader().scrollIntoView().should('exist').and('be.visible')
    addIntuneAppConfig.getAndroidTableHeaderPlusButton().should('exist').and('be.visible').click()
    addIntuneAppConfig.getGroupsDailogBox().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxHeading().should('exist').and('be.visible')
    addIntuneAppConfig.getGroupsDailogBoxDescriptionText().should('exist').and('be.visible')
    addIntuneAppConfig.getDefaultErrorMessage().should('exist').and('be.visible')
  })
})
