import HttpStatus from 'http-status-codes'
import { useMemo, useRef } from 'react'
import { useTranslation } from 'react-i18next'
import { useNavigate } from 'react-router'

import { useQueryParams } from '@ues-behaviour/react'
import { FeatureName, FeaturizationApi, useFeatures } from '@ues-data/shared'
import { useSnackbar } from '@ues/behaviours'

import { OS_DELIMITER } from './constants'

export interface OsQueryFilter {
  platform?: string
  version?: string
  severity?: string
}

export const useOsQuery = () => {
  const platformParam = useQueryParams().get('platform')
  const versionParam = useQueryParams().get('version')
  const severityParam = useQueryParams().get('severity')
  return { platformParam, versionParam, severityParam }
}

export const getOsName = (platform: string, version: string): string => {
  return `${platform}${OS_DELIMITER}${version}`
}

export const getOsPlatform = (platform: string): string => {
  switch (platform.toLowerCase()) {
    case 'android':
      return 'Android'
    case 'ios':
      return 'iOS'
    default:
      return platform
  }
}

export function useErrorReport(error: any): boolean {
  const { t } = useTranslation(['mtd/common'])
  const snackbar = useSnackbar()
  const features = useFeatures()

  const lastErrorMessage = useRef<any>()
  return useMemo(() => {
    if (error) {
      if (error.response?.status === HttpStatus.FORBIDDEN && features.isEnabled(FeatureName.PermissionChecksEnabled)) {
        lastErrorMessage.current = undefined
        return false
      } else if (lastErrorMessage.current !== error.message) {
        snackbar.enqueueMessage(t('vulnerability.errors.networkAccess'), 'error')
        lastErrorMessage.current = error.message
        return true
      } else {
        return true
      }
    } else {
      lastErrorMessage.current = undefined
      return true
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [error, snackbar, t])
}

interface NavProps {
  features
  navigate
}

export function useFeatureNavigation(): NavProps {
  return { features: useFeatures(), navigate: useNavigate() }
}

export const vulnerabilitiesNavigate = (navProps: NavProps, uri: string, query?: any): void => {
  const { features, navigate } = navProps
  const singleNxAppNavigation = features.isEnabled(FeatureName.SingleNXApp)

  let path = '/vulnerabilities' + uri
  if (query) {
    path += '?' + new URLSearchParams((query as OsQueryFilter) as string).toString()
  }

  if (singleNxAppNavigation) {
    navigate(path)
  } else {
    window.location.assign('uc/mtd#' + path)
  }
}

export const mobileDevicesNavigate = (navProps: NavProps, query: any): void => {
  const { features, navigate } = navProps
  const singleNxAppNavigation = features.isEnabled(FeatureName.SingleNXApp)
  if (singleNxAppNavigation) {
    navigate('/mobile-devices?' + new URLSearchParams(query).toString())
  } else {
    window.location.assign('uc/platform#/mobile-devices?' + new URLSearchParams(query).toString())
  }
}

export const inBrackets = (securityPatch: string): string => {
  return `(${securityPatch})`
}

export const withoutBrackets = (securityPatch: string): string => {
  return securityPatch?.replace(/[()]/g, '')
}
