//******************************************************************************
// Copyright 2020 BlackBerry. All Rights Reserved.

/* eslint-disable prefer-rest-params */

import type { PagedResponse, Response } from '../types'
import type VulnerabilityInterface from './vulnerability-interface'
import type { CveSummary, Os, OsCount, OsDetails, OsFilter, SeverityCounts, SeverityCountsByOs } from './vulnerability-types'
import { OsFilterField, Severity } from './vulnerability-types'

const is = 'VulnerabilityClass'

const osCountMock: OsCount[] = [
  {
    os: {
      platform: 'ios',
      version: '13',
      securityPatch: '',
    },
    endpointCount: 3,
  },
  {
    os: {
      platform: 'android',
      version: '10',
      securityPatch: '2020-10',
    },
    endpointCount: 2,
  },
  {
    os: {
      platform: 'android',
      version: '10.1',
      securityPatch: '2020-11',
    },
    endpointCount: 4,
  },
]

const severityCountsMock: SeverityCounts = {
  critical: 50,
  high: 30,
  medium: 20,
  low: 5,
  none: 0,
}

const severityCountsByOsMock: SeverityCountsByOs[] = [
  {
    os: {
      platform: 'ios',
      version: '13',
      securityPatch: '',
    },
    severityCount: {
      critical: 30,
      high: 30,
      medium: 30,
      low: 30,
      none: 0,
    },
  },
  {
    os: {
      platform: 'android',
      version: '10',
      securityPatch: '2020-10',
    },
    severityCount: {
      critical: 150,
      high: 30,
      medium: 20,
      low: 10,
      none: 0,
    },
  },
  {
    os: {
      platform: 'android',
      version: '10.1',
      securityPatch: '2020-11',
    },
    severityCount: {
      critical: 10,
      high: 20,
      medium: 30,
      low: 40,
      none: 0,
    },
  },
]

const osDetailsPage1MockData: OsDetails[] = [
  {
    user: {
      displayName: 'User1',
      email: 'user1@my-organization.com',
    },
    endpoint: {
      platform: 'iOS',
      version: '13',
      deviceModelName: 'iPhone',
      securityPatch: '',
    },
  },
  {
    user: {
      displayName: 'User2',
      email: 'user2@my-organization.com',
    },
    endpoint: {
      platform: 'android',
      version: '10.1',
      deviceModelName: 'Pixel2',
      securityPatch: '2020-10',
    },
  },
  {
    user: {
      displayName: 'User3',
      email: 'user3@my-organization.com',
    },
    endpoint: {
      platform: 'android',
      version: '10.3',
      deviceModelName: 'Pixel3',
      securityPatch: '2020-10',
    },
  },
  {
    user: {
      displayName: 'User4',
      email: 'user4@my-organization.com',
    },
    endpoint: {
      platform: 'android',
      version: '11.1.1',
      deviceModelName: 'LG22-44',
      securityPatch: '2020-10',
    },
  },
  {
    user: {
      displayName: 'User5',
      email: 'user5@my-organization.com',
    },
    endpoint: {
      platform: 'android',
      version: '10',
      deviceModelName: 'Samsung',
      securityPatch: '2020-12',
    },
  },
  {
    user: {
      displayName: 'User6',
      email: 'user6@my-organization.com',
    },
    endpoint: {
      platform: 'iOS',
      version: '14',
      deviceModelName: 'iPhone-X',
      securityPatch: '',
    },
  },
  {
    user: {
      displayName: 'User7',
      email: 'user7@my-organization.com',
    },
    endpoint: {
      platform: 'iOS',
      version: '13.5',
      deviceModelName: 'iPhoneS',
      securityPatch: '',
    },
  },
  {
    user: {
      displayName: 'User8',
      email: 'user8@my-organization.com',
    },
    endpoint: {
      platform: 'android',
      version: '10',
      deviceModelName: 'Samsung',
      securityPatch: '2020-10',
    },
  },
  {
    user: {
      displayName: 'User9',
      email: 'user9@my-organization.com',
    },
    endpoint: {
      platform: 'android',
      version: '10',
      deviceModelName: 'Samsung',
      securityPatch: '2020-10',
    },
  },
  {
    user: {
      displayName: 'User10',
      email: 'user10@my-organization.com',
    },
    endpoint: {
      platform: 'android',
      version: '10',
      deviceModelName: 'Samsung',
      securityPatch: '2020-10',
    },
  },
  {
    user: {
      displayName: 'User11',
      email: 'user11@my-organization.com',
    },
    endpoint: {
      platform: 'android',
      version: '10',
      deviceModelName: 'Samsung',
      securityPatch: '2020-10',
    },
  },
  {
    user: {
      displayName: 'User12',
      email: 'user12@my-organization.com',
    },
    endpoint: {
      platform: 'android',
      version: '10',
      deviceModelName: 'Samsung',
      securityPatch: '2020-10',
    },
  },
]

function getOsDetailsFromMock(filters: OsFilter[]): PagedResponse<OsDetails> {
  let filteredData = osDetailsPage1MockData
  for (const filter of filters) {
    if (filter.field === OsFilterField.DEVICE_MODEL) {
      filteredData = filteredData.filter(entry => entry.endpoint.deviceModelName.includes(filter.values[0]))
    }
    if (filter.field === OsFilterField.USER_NAME) {
      filteredData = filteredData.filter(entry => entry.user.displayName.includes(filter.values[0]))
    }
    if (filter.field === OsFilterField.EMAIL) {
      filteredData = filteredData.filter(entry => entry.user.email.includes(filter.values[0]))
    }
  }
  return {
    next: '',
    elements: filteredData,
  }
}

const osDetailsEmptyMock: PagedResponse<OsDetails> = {
  next: '',
  elements: [],
}
const osVulnerabilitiesMock: CveSummary[] = [
  {
    cveId: 'CVE-1990-0002',
    cveUrl: 'https://nvd.nist.gov/vuln/detail/CVE-2020-0002',
    cvss3Impact: {
      severity: Severity.CRITICAL,
      baseScore: 9.1,
    },
    description: 'This is a critical vulnerability',
    lastModifiedDate: '2021-05-03T18:18:27.759Z',
  },
  {
    cveId: 'CVE-1990-0003',
    cveUrl: 'https://nvd.nist.gov/vuln/detail/CVE-2020-0003',
    cvss3Impact: {
      severity: Severity.HIGH,
      baseScore: 7.1,
    },
    description: 'This is quite important vulnerability',
    lastModifiedDate: '2021-05-02T18:18:27.759Z',
  },
  {
    cveId: 'CVE-1990-0004',
    cveUrl: 'https://nvd.nist.gov/vuln/detail/CVE-2020-0004',
    cvss3Impact: {
      severity: Severity.MEDIUM,
      baseScore: 8.4,
    },
    description: 'This is not important vulnerability',
    lastModifiedDate: '2021-05-03T18:18:27.759Z',
  },
  {
    cveId: 'CVE-1990-0005',
    cveUrl: 'https://nvd.nist.gov/vuln/detail/CVE-2020-0005',
    cvss3Impact: {
      severity: Severity.LOW,
      baseScore: 6.1,
    },
    description: 'You can ignore it',
    lastModifiedDate: '2021-05-01T18:18:27.759Z',
  },
]

const cveSummariesFirstMock: PagedResponse<CveSummary> = {
  next: '',
  elements: osVulnerabilitiesMock,
}

const cveSummariesLastMock: PagedResponse<CveSummary> = {
  next: '',
  elements: [],
}

class VulnerabilityClass implements VulnerabilityInterface {
  getOsCount(): Promise<Response<OsCount[]>> {
    console.log(`${is}: getOsCount(${[...arguments]})`)

    return Promise.resolve({ data: osCountMock })
  }
  getSeverityCounts(oss: Os[]): Promise<Response<SeverityCounts>> {
    console.log(`${is}: getSeverityCounts(${[...arguments]})`)

    return Promise.resolve({ data: severityCountsMock })
  }
  getSeverityCountsByOs(oss: Os[]): Promise<Response<SeverityCountsByOs[]>> {
    console.log(`${is}: getSeverityCountsByOs(${[...arguments]})`)

    return Promise.resolve({ data: severityCountsByOsMock })
  }
  getOsDetails(oss: Os[], filters: OsFilter[], cursor: string): Promise<Response<PagedResponse<OsDetails>>> {
    console.log(`${is}: getOsDetails(${[...arguments]})`)
    return Promise.resolve(cursor === null ? { data: getOsDetailsFromMock(filters) } : { data: osDetailsEmptyMock })
  }
  getCveSummaries(oss: Os[], cursor: string): Promise<Response<PagedResponse<CveSummary>>> {
    console.log(`${is}: getCveSummaries(${[...arguments]})`)

    return Promise.resolve(cursor === null ? { data: cveSummariesFirstMock } : { data: cveSummariesLastMock })
  }
}

const VulnerabilityMock = new VulnerabilityClass()

export { VulnerabilityMock }
