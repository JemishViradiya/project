// eslint-disable-next-line import/default
import { UesAxiosClient } from '@ues-data/shared'

import type { PagedResponse, Response } from '../types'
import type VulnerabilityInterface from './vulnerability-interface'
import type { CveSummary, Os, OsCount, OsDetails, OsFilter, SeverityCounts, SeverityCountsByOs } from './vulnerability-types'

const MTD_REWRITE_PREFIX = '/mtd'

function cursorRewrite(cursor) {
  if (cursor !== null) {
    const url = new URL(cursor)
    return `${MTD_REWRITE_PREFIX}${url.pathname}${url.search}`
  } else {
    return null
  }
}

const VulnerabilityApi = {
  postSeverityCountTotals: async oss => {
    return await UesAxiosClient().post(`/mtd/v1/vulnerability/cves/severityCountTotals`, oss, {})
  },
  postSeverityCountByOs: async oss => {
    return await UesAxiosClient().post(`/mtd/v1/vulnerability/cves/severityCountByOs`, oss, {})
  },
  postSummaries: async (cursor, oss) => {
    return await UesAxiosClient().post(cursor !== null ? cursorRewrite(cursor) : `/mtd/v1/vulnerability/cves/summaries`, oss, {})
  },
}

const DashboardAggregationApi = {
  getOsCount: async () => {
    return await UesAxiosClient().get('/mtd/v1/dashboardaggregation/os/count', {})
  },
  postOsDetails: async (cursor, oss) => {
    return await UesAxiosClient().post(cursor !== null ? cursorRewrite(cursor) : '/mtd/v1/dashboardaggregation/os/details', oss, {})
  },
}

class VulnerabilityClass implements VulnerabilityInterface {
  async getOsCount(): Promise<Response<OsCount[]>> {
    return await DashboardAggregationApi.getOsCount()
  }

  async getSeverityCounts(oss: Os[]): Promise<Response<SeverityCounts>> {
    return await VulnerabilityApi.postSeverityCountTotals({ oss: oss })
  }

  async getSeverityCountsByOs(oss: Os[]): Promise<Response<SeverityCountsByOs[]>> {
    return await VulnerabilityApi.postSeverityCountByOs({ oss: oss })
  }

  async getOsDetails(oss: Os[], filters: OsFilter[], cursor: string): Promise<Response<PagedResponse<OsDetails>>> {
    return await DashboardAggregationApi.postOsDetails(cursor, { oss: oss, filters: filters })
  }

  async getCveSummaries(oss: Os[], cursor: string): Promise<Response<PagedResponse<CveSummary>>> {
    return await VulnerabilityApi.postSummaries(cursor, { oss: oss })
  }
}

const Vulnerability = new VulnerabilityClass()

export { Vulnerability }
export * from './vulnerability-mock'
