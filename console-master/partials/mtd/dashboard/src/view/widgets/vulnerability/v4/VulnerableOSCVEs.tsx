import type { TFunction } from 'i18next'
import React, { useCallback, useMemo } from 'react'
import { useTranslation } from 'react-i18next'

import { Box, Chip, Link, Typography } from '@material-ui/core'

import { XGrid } from '@ues-behaviour/x-grid'
import { MobileProtectData, queryCveInfo } from '@ues-data/mtd'
import { useStatefulAsyncQuery } from '@ues-data/shared'
import { Permission, PermissionError } from '@ues-data/shared-types'
import { HelpLinks } from '@ues/assets'
import type { TableColumn } from '@ues/behaviours'
import {
  AppliedFilterPanel,
  ColumnPicker,
  ContentAreaPanel,
  FILTER_TYPES,
  meetsFilter,
  OPERATOR_VALUES,
  PageTitlePanel,
  SecuredContent,
  TableProvider,
  TableSortDirection,
  TableToolbar,
  useColumnPicker,
  useFilter,
  useFilterLabels,
  useSort,
} from '@ues/behaviours'

import { OS_DELIMITER } from './utils/constants'
import { CheckBoxFilterComponent, NameFilterComponent, NumericRangeFilterComponent } from './utils/filters'
import {
  getOsName,
  useErrorReport,
  useFeatureNavigation,
  useOsQuery,
  vulnerabilitiesNavigate,
  withoutBrackets,
} from './utils/queries'
import { severitySort, simpleNumberSort, simpleStringSort } from './utils/sorters'
import { useStyles } from './utils/styles'

const MAX_RECORDS_COUNT = 1000

const SEVERITY_COLUMN = 'severity'
const CVE_COLUMN = 'cve'
const SCORE_COLUMN = 'cveScore'
const DESCRIPTION_COLUMN = 'cveDescription'
const LASTMODIFIEDTIME_COLUMN = 'cveLastModifiedTime'

interface CVE {
  cveId: string
  cveUrl: string
}

export interface CveGridPros {
  platformParam: string
  versionParam: string
  severityParam: string
}

function translateSeverity(severity: string, t: TFunction): string {
  return t(`vulnerability.severities.${severity.toLowerCase()}`)
}

const getSeverityDataItem = (severity: string, t: TFunction) => {
  return <Chip label={translateSeverity(severity, t)} className={`alert-chip-${severity}`} />
}

function getCveDataItem(cve: CVE) {
  return (
    <Link target="_blank" rel="noopener" href={cve.cveUrl}>
      {cve.cveId}
    </Link>
  )
}

function getTimeItem(lastModifiedDate: string, t: TFunction) {
  return <>{t('vulnerability.cvedetails.cveDateFormat', { date: new Date(lastModifiedDate) })}</>
}

function composeTableData(items: MobileProtectData.CveSummary[]) {
  return items.map((item, index) => {
    return {
      [SEVERITY_COLUMN]: item.cvss3Impact.severity.toLowerCase(),
      [SCORE_COLUMN]: item.cvss3Impact.baseScore,
      [CVE_COLUMN]: { cveId: item.cveId, cveUrl: item.cveUrl },
      [DESCRIPTION_COLUMN]: item.description,
      [LASTMODIFIEDTIME_COLUMN]: item.lastModifiedDate,
      id: index,
    }
  })
}

const sortHandler = (data, sort) => {
  const sortBy = sort.sort
  switch (sortBy) {
    case SEVERITY_COLUMN:
      return data.sort((a: string, b: string) => severitySort(a[sortBy], b[sortBy], sort.sortDirection))
    case SCORE_COLUMN:
      return data.sort((a: number, b: number) => simpleNumberSort(a[sortBy], b[sortBy], sort.sortDirection))
    case CVE_COLUMN:
      return data.sort((a, b) => simpleStringSort(a[sortBy].cveId, b[sortBy].cveId, sort.sortDirection))
    case DESCRIPTION_COLUMN:
      return data.sort((a: string, b: string) => simpleStringSort(a[sortBy], b[sortBy], sort.sortDirection))
    case LASTMODIFIEDTIME_COLUMN:
      return data.sort((a: string, b: string) =>
        simpleNumberSort(new Date(a[sortBy]).getTime(), new Date(b[sortBy]).getTime(), sort.sortDirection),
      )
    default:
      return data
  }
}

const idFunction = rowData => rowData.id

const VulnerableOSCVEs = React.memo(() => {
  const featureNavigation = useFeatureNavigation()
  const { t } = useTranslation(['mtd/common'])
  const { container, content } = useStyles()

  const { platformParam, versionParam, severityParam } = useOsQuery()

  const goBack = (): void => {
    vulnerabilitiesNavigate(featureNavigation, '/details')
  }

  return (
    <Box className={container}>
      <PageTitlePanel
        title={[t('vulnerability.cvedetails.title1'), getOsName(platformParam, versionParam)]}
        goBack={goBack}
        helpId={HelpLinks.Vulnerabilities}
      />
      <Box className={content}>
        <SecuredContent requiredPermissions={Permission.ECS_VULNERABILITIES_READ}>
          <VulnerableOSCVEGrid platformParam={platformParam} versionParam={versionParam} severityParam={severityParam} />
        </SecuredContent>
      </Box>
    </Box>
  )
})

// eslint-disable-next-line sonarjs/cognitive-complexity
const VulnerableOSCVEGrid = React.memo(({ platformParam, versionParam, severityParam }: CveGridPros) => {
  const { t } = useTranslation(['mtd/common'])

  const columns: TableColumn[] = useMemo(
    () => [
      {
        label: t('vulnerability.cvedetails.severity'),
        dataKey: SEVERITY_COLUMN,
        filterType: FILTER_TYPES.CHECKBOX,
        renderFilter: () => (
          <CheckBoxFilterComponent
            label={t('vulnerability.cvedetails.severity')}
            dataKey={SEVERITY_COLUMN}
            items={Object.values(MobileProtectData.Severity)
              .filter(value => value !== MobileProtectData.Severity.NONE)
              .map(item => translateSeverity(item, t))}
          />
        ),
        renderCell: (rowData: any, rowDataIndex: number) => {
          return getSeverityDataItem(rowData[SEVERITY_COLUMN], t)
        },
        sortable: true,
        persistent: true,
        gridColDefProps: { flex: 1 },
      },
      {
        label: t('vulnerability.cvedetails.cveScore'),
        dataKey: SCORE_COLUMN,
        filterType: FILTER_TYPES.NUMERIC_RANGE,
        renderFilter: () => <NumericRangeFilterComponent label={t('vulnerability.cvedetails.cveScore')} dataKey={SCORE_COLUMN} />,
        sortable: true,
        persistent: true,
        gridColDefProps: { flex: 1 },
      },
      {
        label: t('vulnerability.cvedetails.cve'),
        dataKey: CVE_COLUMN,
        filterType: FILTER_TYPES.QUICK_SEARCH,
        renderFilter: () => <NameFilterComponent label={t('vulnerability.cvedetails.cve')} dataKey={CVE_COLUMN} />,
        renderCell: (rowData: any, rowDataIndex: number) => {
          return getCveDataItem(rowData[CVE_COLUMN])
        },
        sortable: true,
        persistent: true,
        gridColDefProps: { flex: 1 },
      },
      {
        label: t('vulnerability.cvedetails.cveDescription'),
        dataKey: DESCRIPTION_COLUMN,
        filterType: FILTER_TYPES.QUICK_SEARCH,
        renderFilter: () => (
          <NameFilterComponent label={t('vulnerability.cvedetails.cveDescription')} dataKey={DESCRIPTION_COLUMN} />
        ),
        sortable: true,
        gridColDefProps: { flex: 1, width: 800 },
      },
      {
        label: t('vulnerability.cvedetails.cveLastModifiedTime'),
        dataKey: LASTMODIFIEDTIME_COLUMN,
        renderCell: (rowData: any, rowDataIndex: number) => {
          return getTimeItem(rowData[LASTMODIFIEDTIME_COLUMN], t)
        },
        sortable: true,
        gridColDefProps: { flex: 1 },
      },
    ],
    [t],
  )

  const sortProps = useSort(SCORE_COLUMN, TableSortDirection.Asc)

  const defaultFilters = {}
  if (severityParam) {
    defaultFilters[SEVERITY_COLUMN] = { value: [translateSeverity(severityParam, t)], operator: OPERATOR_VALUES.IS_IN }
  }
  const filterProps = useFilter(defaultFilters)

  const filterLabelProps = useFilterLabels(filterProps.activeFilters, columns)

  const { displayedColumns, columnPickerProps } = useColumnPicker({ columns, title: t('vulnerability.columnPicker') })
  columnPickerProps.tableCell = false

  const request = useMemo(() => {
    const versionInfo = versionParam.split(OS_DELIMITER)
    return [{ platform: platformParam, version: versionInfo[0], securityPatch: withoutBrackets(versionInfo[1]) }]
  }, [platformParam, versionParam])

  const { data, loading, error } = useStatefulAsyncQuery(queryCveInfo, {
    variables: request,
  })

  const backendReadable = useErrorReport(error)
  if (!backendReadable) throw new PermissionError([Permission.ECS_VULNERABILITIES_READ], error)

  const newData = useMemo(() => {
    return data !== undefined ? composeTableData(data) : []
  }, [data])

  const filteredAssigned = useMemo(() => {
    const filteredData = newData
      .filter(row =>
        Object.keys(row)
          .filter(key => key === SEVERITY_COLUMN)
          .reduce((isVisible, key) => {
            return (
              isVisible && meetsFilter(translateSeverity(row[key], t), filterProps.activeFilters[key] as any, FILTER_TYPES.CHECKBOX)
            )
          }, true),
      )
      .filter(row =>
        Object.keys(row)
          .filter(key => key === SCORE_COLUMN)
          .reduce((isVisible, key) => {
            return isVisible && meetsFilter(row[key], filterProps.activeFilters[key] as any, FILTER_TYPES.NUMERIC_RANGE)
          }, true),
      )
      .filter(row =>
        Object.keys(row)
          .filter(key => key === CVE_COLUMN)
          .reduce((isVisible, key) => {
            return isVisible && meetsFilter(row[key].cveId, filterProps.activeFilters[key] as any, FILTER_TYPES.QUICK_SEARCH)
          }, true),
      )
      .filter(row =>
        Object.keys(row)
          .filter(key => key === DESCRIPTION_COLUMN)
          .reduce((isVisible, key) => {
            return isVisible && meetsFilter(row[key], filterProps.activeFilters[key] as any, FILTER_TYPES.QUICK_SEARCH)
          }, true),
      )

    return sortHandler(filteredData, sortProps)
  }, [filterProps.activeFilters, newData, sortProps, t])

  const onLoadMoreRows = useCallback(async ({ startIndex, stopIndex }) => {
    // Do nothing for now
  }, [])

  const basicProps = useMemo(
    () => ({
      columns: displayedColumns,
      columnPicker: props => <ColumnPicker {...columnPickerProps} {...props} />,
      idFunction,
      loading,
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [displayedColumns, columnPickerProps],
  )

  const providerProps = useMemo(
    () => ({
      basicProps,
      filterProps,
      sortingProps: sortProps,
    }),
    [basicProps, filterProps, sortProps],
  )

  const tableProps = useMemo(
    () => ({
      rows: filteredAssigned ?? [],
      loading: loading,
      noRowsMessageKey: 'mtd/common:vulnerability.noDataLabel',
    }),
    [filteredAssigned, loading],
  )

  const tableTitle = undefined

  return (
    <ContentAreaPanel fullWidth fullHeight>
      <TableProvider {...providerProps}>
        <TableToolbar
          begin={tableTitle ? <Typography variant="h2">{tableTitle}</Typography> : null}
          end={
            <Box display="flex" alignItems="center">
              <Box mb={6} mr={8}>
                <Typography>{`${filteredAssigned.length} ${t('vulnerability.results')}`}</Typography>
              </Box>
            </Box>
          }
          bottom={<AppliedFilterPanel {...filterProps} {...filterLabelProps} />}
        />
        <XGrid {...tableProps} />
      </TableProvider>
    </ContentAreaPanel>
  )
})

export default VulnerableOSCVEs
