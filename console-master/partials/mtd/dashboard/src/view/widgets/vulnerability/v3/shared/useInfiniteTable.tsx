import clsx from 'clsx'
import React, { useCallback } from 'react'
import { AutoSizer, InfiniteLoader, Table } from 'react-virtualized'

import Box from '@material-ui/core/Box'
import LinearProgress from '@material-ui/core/LinearProgress'
import type { Theme } from '@material-ui/core/styles'
import { useTheme } from '@material-ui/core/styles'
import Typography from '@material-ui/core/Typography'

import type { MobileProtectData } from '@ues-data/mtd'
import type { RenderingProps, TableColumn } from '@ues/behaviours'
import { useInfiniteTableStyles } from '@ues/behaviours'

import type { TableSortCriteria } from './sortUtils'

export const standardWidth = { flexGrow: 1, flexShrink: 0, width: 150 }

export interface Row {
  index: number
}

export type ReturnedHookProps = {
  columns?: TableColumn[]
  renderingProps: RenderingProps
  classes?: any
  theme?: Theme
}

export interface TabProps {
  value: number
  index: number
  oss: MobileProtectData.OsCount[]
}

export interface VulnerabilityTableProps {
  columns?: TableColumn[]
  content: any
  displayedColumns?: TableColumn[]
  noDataRenderer: () => any
  rowCount: number
  rowGetter: (row: Row) => any
  infiniteLoader: {
    threshold?: number
    isRowLoaded: (row: Row) => boolean
    loadMoreRows: (offset: { startIndex: number; stopIndex: number }) => void
    minimumBatchSize?: number
  }
  activeFilters?: any
  onSetFilter?: (filer: any) => void
  onSortChange?: (criteria: TableSortCriteria) => void
  headerRowRenderer: (data: any) => any
  headerHeight: number
  rowHeight: number
}

export const gridStyle = {
  direction: 'inherit',
  outline: 'none',
}

export const Loading = ({ style }) => {
  return (
    <Box mt={-1} style={style}>
      <LinearProgress color="secondary" />
    </Box>
  )
}

export const NoData = ({ noDataLabel }) => {
  return (
    <Box p={3} textAlign="center">
      <Typography variant="body1">{noDataLabel}</Typography>
    </Box>
  )
}

export const useInfiniteTable = () => {
  const classes = useInfiniteTableStyles()

  const theme = useTheme()

  const getRowClassName = useCallback(
    ({ index }) => {
      return clsx(classes.tableRow, classes.flexContainer)
    },
    [classes],
  )

  const renderingProps: RenderingProps = {
    getRowClassName,
  }

  return { renderingProps, classes, theme }
}

export const InfiniteTable: React.FC<VulnerabilityTableProps> = ({
  columns,
  content,
  noDataRenderer,
  infiniteLoader,
  activeFilters,
  onSetFilter,
  headerRowRenderer,
  headerHeight,
  rowHeight,
  ...tableProps
}) => {
  const { renderingProps, classes } = useInfiniteTable()
  const { getRowClassName } = renderingProps

  return (
    <div className={classes?.autosizeWrapper}>
      <InfiniteLoader {...infiniteLoader}>
        {({ onRowsRendered, registerChild }) => (
          <AutoSizer>
            {({ height, width }) => (
              <Table
                ref={registerChild}
                onRowsRendered={onRowsRendered}
                height={height}
                width={width}
                rowHeight={rowHeight}
                headerHeight={headerHeight}
                gridStyle={gridStyle}
                className={classes?.table}
                rowClassName={getRowClassName}
                headerClassName={classes?.header}
                headerRowRenderer={headerRowRenderer}
                noRowsRenderer={noDataRenderer}
                {...tableProps}
              >
                {content}
              </Table>
            )}
          </AutoSizer>
        )}
      </InfiniteLoader>
    </div>
  )
}
